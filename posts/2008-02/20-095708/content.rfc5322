Subject: zope.testbrowser: Automating the Web
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: 
Source: https://oubiwann.blogspot.com/2008/02/zopetestbrowser-automating-web.html
Comments:
Content-Type: md
Public?: true

Speaking of <a
href="http://oubiwann.blogspot.com/2008/02/twisted-filepath-module.html">littl
e known python modules</a>, if you haven't used <span style="font-family:
monospace; font-size: 9pt;">zope.testbrowser</span>, please raise your hand.
Okay, all of you that raised your hand and have ever wanted to automate web
forms, check a web site's functionality, or perform screen-scraping related
tasks, pull up a chair. This won't take long, because <span
style="font-family: monospace; font-size: 9pt;">zope.testbrowser</span>'s API
rocks so hard and is so easy to use.<br /><br />I first started using <span
style="font-family: monospace; font-size: 9pt;">zope.testbrowser</span>
sometime before consulting for Zenoss. However, when I implemented Zenoss'
"Synthetic Transactions" (I believe this was originally part of their open
source offering, but has since been moved into the Enterprise Edition), I used
it again and profusely. It provided me with a wonderful Python API (a
mechanize wrapper and then some), one so intuitive that I could use not only
without thinking, but for which I didn't even have to read the docs. This
solution proved to be friendly to programmers, but we were really targeting
non-programming network administrators and IT managers with the Zenoss plugin,
so I completed the plugin using <a href="http://twill.idyll.org/">Twill</a>
and <a
href="http://developer.spikesource.com/wiki/index.php/Projects:TestGen4Web">Te
stGen4Web</a> (whose python runner I rewrote and to which I added support for
<span style="font-family: monospace; font-size:
9pt;">zope.testbrowser</span>).<br /><br />I used it again at Zenoss later
when building the community software, enabling users to set their Mailman
preferences from their Plone settings. Most recently, I've been using it to
publish news articles to various sites from a single file used by a script.<br
/><br />Here are a couple of standard use cases with sample code:<br /><br
/><strong>Visit a page and follow some links</strong><br /><script
src="https://gist.github.com/3886983.js?file=01-interactive.py"></script> <br
/><br />That gives us the actual link object... but what if we want to
<em>follow</em> that link?<br /><br /><script
src="https://gist.github.com/3886983.js?file=02-interactive.py"></script> Simp
le enough :-)<br /><br /><strong>Check for content</strong><br /><br />Let's
continue on the Google link trail, and check for content:<br /><br /><script
src="https://gist.github.com/3886983.js?file=03-interactive.py"></script> <br
/><strong>Sign into a site</strong><br /><br />Signing into a site requires
filling in form information and submitting that data.<br /><br /><script
src="https://gist.github.com/3886983.js?file=04-interactive.py"></script> <br
/>A couple things to note here:<br /><ol><li>you need to look at the HTML so
that you know what the form elements are named;</li><li>there are two form
elements on the page that are named <span style="font-family: monospace;
font-size: 9pt;">loginpage_email</span>, and we want the first one;
and</li><li>I omitted the part of the code where I pulled my credentials from
the file system.</li></ol><strong>Submit form data</strong><br /><br />Now
that we're logged in, let's change some out-dated information in my profile
(my old blog's link has been there for too long):<br /><br /><script
src="https://gist.github.com/3886983.js?file=05-interactive.py"></script> <br
/>Now that we saved it, let's check our results:<br /><script
src="https://gist.github.com/3886983.js?file=06-interactive.py"></script> <br
/>Excellent; just what we expected to see.<br /><br />These are all really
simple examples, but they should be helpful in providing some insight and
inspiring you to use it :-) Working with radio buttons is a little more
complex in that you have to get the containing object first and use <span
style="font-family: monospace; font-size: 9pt;">getControl</span> on that
object in order to get the selection you want. However, if you've worked with
HTML more than any sane person should have to (I think that exact amount is
"any") , this will all be quite expected.<br /><br />So, who's up for making
an async version to work with Twisted? ;-)<br /><br />A tangential caveat: I
made a comment above about the <span style="font-family: monospace; font-size:
9pt;">zope.testbrowser</span> API rocking, and that needs some clarification.
As far as I am concerned, there are two major ways in which API's can be
graded: <br /><ol><li>how easy is the API to use, how well is it documented,
how much of the problem domain does it cover? (developer as user)</li><li>how
elegantly/efficiently was the solution implemented (developer as
contributor)</li></ol><span style="font-family: monospace; font-size:
9pt;">zope.testbrowser</span> rocks from the perspective of a coder using the
API. I've never looked at how it is implemented, because I haven't
<em>needed</em> to. It does everything I require without me having to dig
around in its guts. As such, I can make no assertions as to the quality of its
implementation. However, it's packages, modules, classes and methods are all
named just as I would expect them to be named and do what I would expect them
to do. That may not sound like a big deal, but it really is.<br /><br /><!--
technorati tags start --><br /><div style="font-size: 10px; text-align:
right;">Technorati Tags: <a href="http://www.technorati.com/tag/howto"
rel="tag">howto</a>, <a href="http://www.technorati.com/tag/programming"
rel="tag">programming</a>, <a href="http://www.technorati.com/tag/python"
rel="tag">python</a>, <a href="http://www.technorati.com/tag/web"
rel="tag">web</a>, <a href="http://www.technorati.com/tag/zope"
rel="tag">zope</a></div><!-- technorati tags end -->