Subject: A Sinfonia on Messaging with txAMQP, Part IV
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: components,txamqp,adaptation,amqp,python,txamqp-sinfonia,twisted
Source: null
Comments:
Content-Type: md
Public?: true

<div><br /><font style="font-weight: bold;">A Sinfonia on Messaging:</font><br
/><ol><li><a href="http://oubiwann.blogspot.com/2009/06/sinfonia-on-messaging-
with-txamqp.html">The Voice of Business</a><br /></li><li><a
href="http://oubiwann.blogspot.com/2009/06/sinfonia-on-messaging-with-txamqp-p
art.html">The Voice of Architecture</a></li><li><a
href="http://oubiwann.blogspot.com/2009/06/sinfonia-on-messaging-with-txamqp-p
art_18.html">A RabbitMQ and txAMQP Interlude</a></li><li>The Voice of Code<br
/></li></ol><br />Finally, we reach the foundation, the fundament, the bass
line of our <a
href="http://www.music.qub.ac.uk/%7Etomita/essay/inventions.html">sinfonia</a>
. First we looked at the business need (however contrived), then an
architecture that fit this need. We had a little play with txAMQP and RabbitMQ
-- we know how to connect to RabbitMQ, create exchanges and queues and then
bind them together.<br /><br />Now, with a basic understanding under our belts
of messaging systems and some practical experience with Twisted AMQP consumers
and producers, we can tackle unified orders. In this post we will learn how to
extend our knowledge by creating some messaging pattern implementations for
MacGredder's kilt store.<br /><br /><br /><font style="font-weight:
bold;">Architecture Redress</font><br /><br />The outcome we expect for this
part of the implementation is a single message representing a single order
(with a single item per order, for simplicity) that could have come from any
of the three order sources at the kilt store: web site, phone call, or sales
guy. By adding a little complexity in creating a single message abstraction
for the order, we will be able to simplify the system as a whole: the rest of
the code we write will only have to know about one order message, not
three.<br /><br />After closer inspection of the architecture, I've made some
changes to the "unified orders" EIP model. In particular, I've been more
specific about the patterns which we will be using, not treating any as
implicit. Here's the latest:<br /><br />[diagram of new model]<br /><br
/>Here's a list of the patterns we've identified for use in MaGrudder's kilt
store:<br /><ul><li><font size="2"><font style="font-weight:
bold;">Messaging</font> (53)</font></li><li><font size="2"><font
style="font-weight: bold;">Message Broker</font> (322)</font><br
/></li><li><font size="2"><font style="font-weight: bold;">Message</font>
(66)</font></li><li><font size="2"><font style="font-weight: bold;">Message
Endpoint</font> (95)<br /></font></li><li><font size="2"><font
style="font-weight: bold;">Channel Adapter</font> (127)</font><br
/></li><li><font style="font-weight: bold;" size="2">Message
Channel</font><font size="2"> (60)</font></li><li><font size="2"><font
style="font-weight: bold;">Normalizer</font> (352)<br /></font></li><li><font
style="font-weight: bold;" size="2">Message Translator</font><font size="2">
(85)</font></li><li><font style="font-weight: bold;" size="2">Point-to-Point
Channel</font><font size="2"> (103)</font></li></ul>The numbers in parentheses
correspond to the page number in <a
href="http://www.amazon.com/dp/0321200683?tag=enterpriseint-20&amp;camp=14573&
amp;creative=327641&amp;linkCode=as1&amp;creativeASIN=0321200683&amp;adid=0YAA
MBS55JJB5B8PMX6Z&amp;">Enterprise Integration Patterns</a>, where you will
find each pattern described. Some of these may seem rather obvious, but I
don't want to take anything for granted. By keeping them in mind we don't
loose sight of the big picture, and we get to appreciate the work that others
have done for us!<br /><br />For instance, some of these patterns we get for
free with our software:<br /><ul><li>Messaging - provided by RabbitMQ and
txAMQP</li><li>Message Broker - provided by RabbitMQ</li><li>Message -
specified by the AMQ protocol</li><li>Message Channel - specified by the AMQ
protocol</li><li>Point-to-Point Channel - specified by the AMQ
protocol</li></ul>This leaves the following that we need to actually
implement:<br /><ul><li>Message Endpoint - connect an application to a
messaging channel<br /></li><li>Channel Adapter - access an application's
API/data, publish messages to a channel and receive messages</li><li>Message
Translator - translate one data format into another</li><li>Normalizer -
rewire our messaging to handle message translations better<br /></li></ul>For
now, let us ignore RabbitMQ, message routing, and the rest of MacGrudder's
infrastructure. All we're going to do is create message from three possible
sources and ensure that a single format is used in the messaging system. We'll
worry about the rest later :-)<br /><br />Let's look at how orders are
created:<br /><ul><li>Web store - user hits the "place order"
button</li><li>Sales guy - creates an order in the CRM</li><li>Phone call -
someone in the shop writes down an order on a piece of paper<br
/></li></ul>We're going to need to have web girl do the following:<br
/><ul><li>add a new component to the web store code that creates a message
when an order is placed by a customer (Message Endpoint)<br /></li><li>sales
guy's CRM offers an XML-RPC API, so web girl will add a layer of code
combining an XML-RPC client and a messaging client (Channel Adatper)<br
/></li><li>either build a custom form for internal use (custom orders) or add
an admin mode to the web store so that employees can create orders on behalf
of non-web customers (in both cases, Message Endpoint)<br /></li></ul><br
/><font style="font-weight: bold;">The Voice of Code<br /><br /></font>The web
store component will be very straight-forward: we need to intercept the data
during the order creation process, right after the data is successfully saved
to the database.<br /><br /><font style="font-style: italic;">Web Store and
Message Endpoint</font><br /><br />Let's say we have a super-simple web store
like <a
href="http://bazaar.launchpad.net/%7Eoubiwann/adytum-collection/Docs/annotate/
head%3A/messaging/amqp/twisted/simple-web-store/00-original/webstore.py">the o
ne here</a>. At the point where the data is saved to a database, we want to
also publish a message on our messaging server. We can do that by updating the
<font face="courier new">ProcessOrder.render</font> method with a call to our
endpoint:<br /><br />[new render method]<br /><br />Based on previous
analysis, we know that we need to create a message and then send it. We create
a new <font face="courier new">endpoint</font> module with the following
code:<br /><br />[endpoint code]<br /><br />As is expected with the Message
Endpoint pattern, we had to modify our application code, but so far, the
changes have been minimal. For applications where we don't have access to the
source code, we need to create a channel adapter.<br /><br /><font
style="font-style: italic;">CRM and Channel Adapter</font><br /><br
/>Fortunately, sales guy's CRM has an XML-RPC API. To connect the CRM to our
messaging system, we need to do something similar to what we did to our web
store:<br /><ul><li>get new orders (with an XML-RPC client)<br
/></li><li>create a new order message</li><li>send the message</li></ul>For
testing purposes, I've supplied a <a
href="http://bazaar.launchpad.net/%7Eoubiwann/adytum-collection/Docs/annotate/
head%3A/messaging/amqp/twisted/simple-web-store/01-orders/crmxmlrpcserver.py">
fake CRM XML-RPC server</a>. Since we've already written the code for sending
messages, adding support for sending a message based on the data we get from
the CRM's XML-RPC is simplicity itself:<br /><br />[code for adapter]<br /><br
/>With our adapter in place, we now notice that the data we get back fron the
web server and the data provided by the CRM are actually not the same. These
need to be correlated with a Message Translator.<br /><br /><font
style="font-style: italic;">Message Translator</font><br /><br />For the
message translator, I chose to put the code in a separate module and not
integrate the changes directly into the two places where messages are
currently created (the <a
href="http://bazaar.launchpad.net/%7Eoubiwann/adytum-collection/Docs/annotate/
head%3A/messaging/amqp/twisted/simple-web-store/01-orders/adapter.py">Message 
Adapter</a> and the <a
href="http://bazaar.launchpad.net/%7Eoubiwann/adytum-collection/Docs/annotate/
head%3A/messaging/amqp/twisted/simple-web-store/01-orders/endpoint.py">Message
Endpoint</a> implementations). For the purposes of this blog post, that
decision keeps the code and concepts clear, however it has another excellent
benefit: when we choose to split up the message queues (and we will!), the
translator will integrate easily.<br /><br />With these thoughts in mind, I
chose to write the translator using the <a
href="http://twistedmatrix.com/projects/core/documentation/howto/components.ht
ml">Twisted component architecture</a>. You might want to take a quick look at
that link to get a sense of it (especially the bit about creating the plug
socket adapters and plugging in the hairdryer). As cumbersome as a few folks
may find this, it really is a good match: we've got one type of message (the
unified format one) and we want to adapt other message formats to the unified
format one. I did a quick mock-up of a toy implementation (fully-running code)
that expresses this clearly: view it here.<br /><br />The implementation that
we use for our orders isn't all that much different. Besides implementing
actually useful <font face="courier new">getMessage</font> methods, it
provides a convenience function, <font face="courier new">translate</font>,
for doing the adaptation. To save space, I'll just show the two adapter
classes:<br /><br />[adapter classes]<br /><br />This is the fatal piece of
code that finally forces us to think more about how messaging should really
work in this scenario. Do we follow old tendencies? Do we cobble something
together and glue a little messaging in there? Or do we take full advantage of
messages and queues. I bet you can guess which :-)<br /><br /><font
style="font-style: italic;">Normalizer</font><br /><br />There's really no
reason we can't continue with the <a
href="http://bazaar.launchpad.net/%7Eoubiwann/adytum-collection/Docs/files/hea
d%3A/messaging/amqp/twisted/producer-consumer/?file_id=890%40a5ecbb21-ded8-031
0-8b19-a7ee6de54fb5%3ADocs%252Fmessaging%252Famqp%252Ftwisted">messaging setup
</a> we used in the example from the <a
href="http://oubiwann.blogspot.com/2009/06/sinfonia-on-messaging-with-txamqp-p
art_18.html">last blog post</a>. It would work. But let's look at how we would
wire our messaging server such that we could keep our code loosely coupled.<br
/><br />If we do so and keep our translator code separate from the
message-creation code, we're going to need to think of a way for the original
messages to be transformed into translated messages. So, how about this:<br
/><ul><li>add a routing key for each type of source message (e.g., one for web
orders, one for CRM orders, etc.)</li><li>route each received message to the
appropriate translator</li><li>send unified format messages to a new
queue</li><li>point other parts of the application that need order messages at
this new queue<br /></li></ul>What we haven't done in this code is create a
queue for every Message Translator; all<br /><br /><br /><font
style="font-weight: bold;">Running the Code</font><br /><br />If you would
like to see all of this in action, here's what you need to do:<br /><br
/>Download the <a
href="http://bazaar.launchpad.net/%7Eoubiwann/adytum-collection/Docs/files/hea
d%3A/messaging/amqp/twisted/simple-web-store/01-orders/">example code</a>.
Ensure that you have Twisted, txAMQP, and simplejson installed. Open several
terminal windows. In one of them, add the kilt store vhost to RabbitMQ and map
the guest user to it:<br /><br /><span style="font-family: courier new;"> $
rabbitmqctl add_vhost kilt-store</span><br style="font-family: courier
new;"><span style="font-family: courier new;"> $ rabbitmqctl map_user_vhost
guest kilt-store</span><br /><br />Start the fake CRM XML-RPC server in
another terminal window:<br /><br /><span style="font-family: courier new;"> $
twistd -noy ./bin/crm-xmlrpc.tac --pidfile=crm.pid</span><br /><br />Start the
fake web store in another terminal window:<br /><br /><span
style="font-family: courier new;"> $ twistd -noy ./bin/webstore.tac
--pidfile=web.pid</span><br /><br />In another terminal window, start the fake
consumer that will listen on the unified message channel. All messages that
have been normalised to the unified message format we've defined will be
publised here:<br /><br /> <span style="font-family: courier new;">$ python
./bin/fakeconsumer.py</span><br /><br />In yet another window, start the CRM
XML-RPC Message Adapter. This will start pulling orders off the fake CRM order
queue:<br /><br /><span style="font-family: courier new;"> $ python
adapter.py</span><br /><br /><br />XXX With multiple processes connecting to
our queue, we've got a new problem: the messages are consumed in a round-robin
fashion, but what we actually want is for all the consumers to be able to read
off the queue.<br /><br />With a single message, we will want to continue with
our business process: order validation and billing. But that will have to wait
until the next post.<br /><br /><br /><font style="font-weight:
bold;">References</font><a href="http://www.amazon.com/dp/0321200683?tag=enter
priseint-20&amp;camp=14573&amp;creative=327641&amp;linkCode=as1&amp;creativeAS
IN=0321200683&amp;adid=0YAAMBS55JJB5B8PMX6Z&amp;"><br /></a><ul><li><a
href="http://www.amazon.com/dp/0321200683?tag=enterpriseint-20&amp;camp=14573&
amp;creative=327641&amp;linkCode=as1&amp;creativeASIN=0321200683&amp;adid=0YAA
MBS55JJB5B8PMX6Z&amp;">Enterprise Integration Patterns</a><a
href="http://www.enterpriseintegrationpatterns.com/Chapter1.html"><br /></a></
li><li>The <a href="https://launchpad.net/txamqp">async Python library</a> for
AMQP</li><li>The <a
href="http://jira.amqp.org/confluence/download/attachments/720900/amqp0-8.pdf?
version=1">AMQP Spec</a></li><li><a
href="http://www.rabbitmq.com/">RabbitMQ</a></li><li><a href="http://twistedma
trix.com/projects/core/documentation/howto/components.html">Twisted Components
: Interfaces and Adapters</a><br /></li></ul><br /><br /><br /></div>