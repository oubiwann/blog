Subject: Native LoadBalancing for Twisted Apps
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: sofware,load-balancing,cloud,twisted,pypi,concurrency
Source: https://oubiwann.blogspot.com/2008/07/native-loadbalancing-for-twisted-apps.html
Comments:
Content-Type: md
Public?: true

<div>Yesterday, right before midnight, I tagged the 1.1.0 release of txLoadBalancer on Launchpad after completing the last of the planned features. There are some pretty radical changes that have been developed for this release... and the coolest part is this is just the beginning :-) (See the TODO if you don't believe me!)<br /><br />You can checkout from <a href="https://code.launchpad.net/~oubiwann/txloadbalancer/1.1.0">lp:~oubiwann/txloadbalancer/1.1.0</a> or download from <a href="http://pypi.python.org/pypi/txLoadBalancer/">PyPI</a>. If you're a PyPI expert, I've got some questions for you at the end of this post... Been having some sucky experiences with PyPI lately :-(<br /><br />So here's what's going on with txLoadBalancer:<br /><br /><span style="font-weight: bold;">Improved API</span><br /><br />The biggest thing you'll notice if you've switching from PythonDirector is the massive overhaul the API has undergone. Things are cleaner and generally more modern, with a concise and well-defined module layout.<br /><br /><span style="font-weight: bold;">New Load Balancing Algorithm</span><br /><br />I've added support for a weighted host scheduler. Given a weight that represents the frequency a host should be used, a host will be randomly selected, based on it's weight. For example, with two hosts, one having a weight of 1 and the other having a weight of 3, host 2 will be chosen about 75% of the time and host 1 will get about 25% of the requests.<br /><br />Right now, this algorithm has to make several calls to other parts of the code in order to get all the data it needs (it also builds some crazy iterators). As such, it's rather slow and performs poorly when compared to the very light-weight least-connections algorithm. That being said, the next release will include optimizations for the weighted scheduler that make use of a Twisted timer and caching.<br /><br /><span style="font-weight: bold;">Native Twisted Load-Balancing</span><br /><br />Here's the sexiest part: you can now load-balance your Twisted application by using the txLB API; you don't even need to run the load-balancer as a separate app! This evolved as a feature after a conversation with an as-yet unnamed cloud hosting provider, a follow-up discussion with the <a href="http://about.divmod.com/team.html">Divmod team</a>, and then some quiet pondering about ways in which Twisted applications could be supported in cloud/grid/massively-multi-core architectures.<br /><br />The "self load-balancing" API in txLB is not a comlete solution for grid-hosting, but it is a first step in one direction (we've been discussing lots of others, too, including the use of our deployment tool).<br /><br />Before I show you how to use the self load-balancing API, let's take a quick look at a normal Twisted application service:<br /><br /><script src="https://gist.github.com/3886959.js?file=01-myweb.tac.py"></script> You start that with the command <span style="font-family: 'courier new';">twistd -noy myweb.tac</span>. For use with the next example, you can also start two more, one on port 7002 and the other on port 7003.<br /><br />Now here's what you do to make a self load-balanced app:<br /><br /><script src="https://gist.github.com/3886959.js?file=02-myweb-lb.tac.py"></script> As you would expect, you need to indicate the proxy host:port, the algorithm to use, and the hosts that are to be balanced. The host setup assumes that you have three services running on localhost ports 7001, 7002, and 7003. All that's needed now is to just run that code with the usual <span style="font-family: 'courier new';">twistd -noy myapp.tac</span>. Also, for demonstration purposes, this is a somewhat simplified example of what is possible.<br /><br />This may seem like a lot of extra work when compared to the simple web host above, but think about it: we're <span style="font-style: italic;">load-balancing</span> here :-) This saves you from having to manage yet another application. With a few extra lines of code, you can keep it all in one place and have it manage itself.<br /><br />Note that this API is in development and continuing to improve. The example above is from code running in trunk. For the more verbose configuration that is in the 1.1.0 release, be sure to see <span style="font-family: 'courier new';">./bin/txlbWeb.tac</span> from the source tarball. To play with the latest and greatest, you'll want to checkout the code here: <a href="https://code.launchpad.net/~oubiwann/txloadbalancer/main">lp:txloadbalancer</a>.<br /><br /><span style="font-weight: bold;">Other Goodies</span><br /><br />Here is some other good stuff in the release:<br /><ul><li>You can now ssh into a txLB instance and mainipulate the load-balancer in real time from an interactive Python interpreter.</li><li>You can change the proxy to listen on a different port while the application is running (no restart requred!).</li><li>Changes made to the configuration while running are no longer volatile; they are saved to disk (and your old config gets backed up).</li><li>Work from Apple, Inc. was included in this release, too (they use the old PythonDirector in their Calendaring server). This includes a bug fix and management socket feature.</li><li>There is a significant jump in performance between this release and the previous one. I believe this to be due to the separation of concerns in the API, but haven't yet confirmed that.</li></ul><br /><span style="font-weight: bold;">Coming Work</span><br /><br />There are a lot of <span style="font-style: italic;">exciting</span> features coming for txLB. Just to name a few:<br /><ul><li>improved weighted algorithm</li><li>resources-based algorithm (a scheduler that determins the weight of a proxied host by memory, CPU, etc., utilization)</li><li>smarter proxied host failover and recovery</li><li>a heartbeat manager</li><li>txLB-powered application cloning (when started, an app will determine if it needs to run the clone as the managing load-balancer or simply as a proxied host)</li><li>auto-discovery of balanced hosts</li><li>proxy fail-over (a balanced host taking over as manager in the event that the manager goes down)</li><li>ApacheMQ/Stomp integration</li><li>LDAP/RADIUS authentication</li></ul><br />Additionally, I'll be putting together some basic performance metrics contrasting Apache and load-balanced Twisted apps. I will also be comparing previous versions of txLB/PythonDirector with the latest release(s).<br /><br /><span style="font-weight: bold;">Problems with PyPI</span><br /><br />I will close this post on a sad note: PyPI used to be an amazing experience for me (a couple years ago, when it was still being called "cheeseshop"). Everything worked as it was supposed to. This hasn't been the case when I've used it recently (over the past few months).<br /><br />For all that I say about PyPI, I allow for the fact that I may just be missing something, and it may be entirely my fault. That being said, I spent about 3 hours online last night combing though the SIG mail list, the bug list on sourceforge, and blog posts about setuptools and PyPI, and could find no answers to my questions. Well, with the possible exception of a bug report, but it doesn't look like it was confirmed by a PyPI team member, so I'm not sure if it's valid or not.<br /><br />Here are my issues:<br /><ul><li>When I upload my project using <span style="font-family: 'courier new';">python setup.py [sdist|bdist_egg] upload</span>, no metadata defined in my <span style="font-family: 'courier new';">setup()</span> function is presented on my package's PyPI page. When I click the metadata link, it's only got three sparse lines.</li><li>When I manually upload from the package's PKG-INFO itself, all the metadata is presented on the page as it should be, with the exception of the long description. It is in plain text instead of ReST (I am checking that it is valid ReST using distutils settings of <span style="font-family: 'courier new';">reporter.halt_level = 5</span>, <span style="font-family: 'courier new';">reporter.report_level = 1</span>, <span style="font-family: 'courier new';">settings.pep_references = False</span>, and <span style="font-family: 'courier new';">settings.trim_footnote_reference_space = None</span>; these are the same settings that Zope Corp uses to verify the ReST that it uploads to PyPI).</li><li>When I manually edit the long description in the form, I get the same thing: plain text, no ReST.</li><li>When I upload a package that is displayed properly on PyPI (such as <a href="http://pypi.python.org/pypi/zc.twist">zc.twist</a>; uploaded as one of my projects by chaning the name), I get the same problem (this is why I think it might be something that <span style="font-style: italic;">I'm</span> doing wrong...): no metadata, and when I upload the PKG-INFO manually, no ReST.</li></ul>Why, oh why, cruel fates, does this not work any more? I used to be able to upload to PyPI without any of these issues...<br /><br /><br /></div>