Subject: So You Want Your Code to Be Asynchronous? A Twisted Interview
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: asynchronous,twisted,development,interviews,concurrency
Source: https://oubiwann.blogspot.com/2008/06/so-you-want-your-code-to-be-asynchonous.html
Comments:
Content-Type: md
Public?: true

<div xmlns="http://www.w3.org/1999/xhtml"><b>Prologue</b><br /><br />This blog
post was taken from a chat on a Divmod IRC channel couple weeks ago. Let's
start with my opening comments to JP about what I hoped we could accomplish in
the interview.<br /><br />[1:47pm] <span style="font-weight:
bold;">oubiwann</span>:exarkun: developers/users have started to understand
Twisted, see the benefits of an async paradigm, and want to start writing
their code making the best possible use of twisted's event driven nature<br
/>[1:48pm] <span style="font-weight: bold;">oubiwann</span>:they know how to
write code using deferreds, and they're ready to get writing...<br />[1:48pm]
<span style="font-weight: bold;">oubiwann</span>:except they're not<br
/>[1:48pm] <span style="font-weight: bold;">oubiwann</span>:because they don't
know python internals<br />[1:49pm] <span style="font-weight:
bold;">oubiwann</span>:they don't know what python can actually be used with
deferreds because they don't know what requirements there are for python code
that it be non-blocking in the reactor<br />[1:50pm] <span style="font-weight:
bold;">oubiwann</span>:so you're going to help us understand the pitfalls<br
/>[1:50pm] <span style="font-weight: bold;">oubiwann</span>:how to make best
guesses<br />[1:50pm] <span style="font-weight: bold;">oubiwann</span>:and
where to look to get definitive answers<br /><b><br />Change Your Mind</b><br
/><br />Before we go any further, I want to share a few comments and answer
two questions: "Who is this for?" and "What do I need to know for this to mean
something to me?" This post is for anyone who wants to write async code with
Twisted and the answer to the second question is open-ended.<br /><br />Let me
start with what is often interpreted as effrontery: read the source code.
Despite how that may have sounded, it's not another RTFM quip. The Twisted
source code was specifically <i>designed</i> to be read (well, the code from
the last two years, anyway). It was designed to be read, re-read, absorbed,
pondered, and turned into living memes in your brain.<br /><br />Understanding
tricky topics in conceptually dense fields such as mathematics, physics, and
advanced programming requires immersion. When we commit to really learning
something difficult in programming, when we take the big step and dive in, we
are <i>surrounded</i> by code. At a conceptual level, I mean that literally:
it is a spacial experience. This is not something that is typically taught...
the lucky few are able to do this their on the own; the rest have to slowly
build their intuition through experience in order to get comfortable and be
productive in code space.<br /><br />Our school systems tend to train us along
very linear lines: there's a right answer, and a wrong answer. Don't rock the
boat. Don't make the teacher uncomfortable. Follow the rules, do your
homework, and don't ask too many questions. We carry these habits with us into
our professional lives, and it can be quite the task to overcome such a
mindset.<br /><br />Experience is multidimensional. Learning is experience,
not rules. When you really jump into this stuff, it will surround you. You
will have an <i>experience</i> of the code. For me, that is a mental
experience akin to looking at something from the perspective of three
dimensions versus two. When I've not dedicated myself to understanding a
problem, the domain, or the tools of the domain, everything looks very flat to
me. It's hard to muddle through. I feel like I have no depth perception and I
get easily frustrated.<br /><br />When I do take the time, when I make the
investment of attention and interest, the problem spaces really do become
spaces, ones where my mind has a much greater freedom of movement. It's not
smart people who do this kind of thing, it's committed people. Your mind is
your world and it's up to you to make it what you want. No one on a mail list
or IRC channel can do that for you. They can help you with the rules, provide
you with valuable moral support, and guide you along the way. However, a
direct experience of the code as a living world of mind comes from taking many
brave leaps into the unknown.<br /><br /><b>Interview in a Blender</b><br
/><br /><img
src="http://farm1.static.flickr.com/48/131113883_395fccdd23_m.jpg" align="left
" />Jean-Paul Calderone graciously set aside some time to talk with me about
creating asynchronous code in Python, particularly, using the Twisted
framework. As has been said many times before, simply using Twisted or
deferreds doesn't make your code asynchronous. As with any tricky problem, you
have to put some time and thought into what you want to accomplish and how you
want to accomplish it.<br /><br />I'm going to post bits of our chat in
different sections, but hopefully in a way that makes sense. There's some good
information here and some nice reminders. More than anything, though, this
should serve as an encouragement to dig deeper.<br /><br /><b>Why Would I Ever
Need Async Code?</b><br /><br />There are a couple short answers to that:<br
/><ul><li>Your application is doing many long-running computations (or runs of
a varying/unpredictable length).</li><li>Your application runs in an
unpredictable environment (in particular, I'm thinking of network
communications).</li><li>Your application needs to handle lots of events<br
/></li></ul>[1:55pm] <span style="font-weight: bold;">oubiwann</span>:exarkun:
so, what's the first question a developer should ask themselves as they begin
writing their Twisted application/library, txFoo?<br />[1:55pm] <span
style="font-weight: bold;">dash</span>:"would everyone be better off if I just
stopped now?"<br />[1:55pm] <span style="font-weight:
bold;">exarkun</span>:oubiwann: I'm not sure I completely understand the
target audience yet<br />[1:56pm] <span style="font-weight:
bold;">exarkun</span>:my question is kind of like dash's question<br
/>[1:56pm] <span style="font-weight: bold;">exarkun</span>:why is this person
doing this?<br />[1:57pm] <span style="font-weight:
bold;">oubiwann</span>:exarkun: the audience is the group of software
developers that are new to twisted, have a basic grasp of deferreds, and want
their code to be properly async (using Twisted, of course)<br />[1:57pm] <span
style="font-weight: bold;">oubiwann</span>:they don't have anything more than
a passing familiarity of the reactor<br />[1:57pm] <span style="font-weight:
bold;">oubiwann</span>:they don't know python internals<br /><br
/><b>Protocols, Servers, and Clients, Oh My!</b><br /><br />If your
application can use what's already in Twisted, you're on easy street :-) If
not, you may have to write your own protocols.<br /><br />Let's get back to
the chat:<br /><br />[1:57pm] <span style="font-weight:
bold;">exarkun</span>:So `fooÂ´ is... a django-based web application?<br
/>[1:58pm] <span style="font-weight: bold;">exarkun</span>:... a unit
conversion library?<br />[1:58pm] <span style="font-weight:
bold;">oubiwann</span>:sure, that works<br />[1:58pm] <span
style="font-weight: bold;">oubiwann</span>:unit conversion lib<br />[1:58pm]
<span style="font-weight: bold;">oubiwann</span>:(which could be used in
Django)<br />[1:58pm] <span style="font-weight: bold;">exarkun</span>:at a
first guess, I'd say that there's probably no work to do<br />[1:58pm] <span
style="font-weight: bold;">exarkun</span>:how could you have a unit conversion
library that's not async?<br />[1:58pm] <span style="font-weight:
bold;">exarkun</span>:that'd take some work<br />[1:59pm] <span
style="font-weight: bold;">oubiwann</span>:let's say that the unit
calculations take a really long time to run<br />[1:59pm] <span
style="font-weight: bold;">exarkun</span>:Hm. :)<br />[1:59pm] <span
style="font-weight: bold;">idnar</span>:you'd probably have to spawn a new
process then :P<br />[2:00pm] <span style="font-weight:
bold;">exarkun</span>:basically. probably the only other reasonable thing is
for twisted-using code to use the unit conversion api with threads.<br
/>[2:00pm] <span style="font-weight: bold;">exarkun</span>:so then the
question to ask "is my code threadsafe?"<br />[2:00pm] <span
style="font-weight: bold;">oubiwann</span>:what about a messaging server<br
/>[2:00pm] <span style="font-weight: bold;">oubiwann</span>:that sends jobs
out to different hosts for calcs<br />[2:01pm] <span style="font-weight:
bold;">dash</span>:that's not going to be a tiny example<br />[2:01pm] <span
style="font-weight: bold;">exarkun</span>:for that, the job is probably to
take all the parsing and app logic and make sure it's separate from the i/o<br
/>[2:01pm] <span style="font-weight: bold;">exarkun</span>:so "am I using the
socket/httplib/urllib/ftplib/XXXlib module?"<br />[2:03pm] <span
style="font-weight: bold;">exarkun</span>:is another question for the
developer to ask himself<br />[2:06pm] <span style="font-weight:
bold;">exarkun</span>:they probably need to find the api in twisted that does
what they were using a blocking api for, and switch to it<br />[2:07pm] <span
style="font-weight: bold;">exarkun</span>:that might mean implementing a
protocol, or it might mean using getPage or something<br />[2:07pm] <span
style="font-weight: bold;">exarkun</span>:and pushing the async all the way
from the bottom up to the top (maybe not in that direction)<br />[2:08pm]
<span style="font-weight: bold;">oubiwann</span>:by "bottom" are you referring
to protocol/wire-level stuff?<br />[2:08pm] <span style="font-weight:
bold;">oubiwann</span>:exarkun: and by "top" their module's API?<br />[2:09pm]
<span style="font-weight: bold;">exarkun</span>:yes<br />[2:10pm] <span
style="font-weight: bold;">exarkun</span>:oubiwann: the point being, can't
have a sync api implemented in terms of an async one (or at least the means by
which to do so are probably beyond the scope of this post)<br /><br
/><b>Processes</b><br /><br />We didn't really talk about this one. Idnar
mentioned spawning processes briefly, but the discussion never really returned
there. I imagine that this is fairly well understood and may not merit as much
pondering as such things as threads.<br /><br />Which brings us to...<br /><br
/><b>Threads</b><br /><br />Thread safety is the number one concern when
trying to provide an asynchronous API for synchronous code. Here are some
starters for background information:<br /><ul><li><a
href="http://en.wikipedia.org/wiki/Thread-safety">Thread safety </a><br
/></li><li><a href="http://docs.python.org/api/threads.html">Thread State and
the Global Interpreter Lock</a> </li><li><a
href="http://docs.python.org/lib/thread-objects.html">threading.Thread</a> </l
i></ul>Discussing threads consumed the rest of the interview:<br /><br
/>[2:12pm] <span style="font-weight: bold;">oubiwann</span>:exarkun: so, back
to your comment about "is it threadsafe" (if they are doing long-running
python calculations)<br />[2:13pm] <span style="font-weight:
bold;">oubiwann</span>:what are the problems we face when we don't ask
ourselves this question?<br />[2:13pm] <span style="font-weight:
bold;">oubiwann</span>:what happens when we try to run non-threadsafe code in
the Twisted reactor?<br />[2:14pm] <span style="font-weight:
bold;">exarkun</span>:The problem happens when we try to run non-threadsafe
code in a thread to keep it from blocking the reactor thread.<br />[2:16pm]
<span style="font-weight: bold;">oubiwann</span>:so non-thread safe code run
in deferredToThread could...<br />[2:16pm] <span style="font-weight:
bold;">oubiwann</span>:have data inconsistencies which cause non-deterministic
bugs?<br />[2:16pm] <span style="font-weight: bold;">dash</span>:have the
usual effects of running non-threadsafe code<br />[2:16pm] <span
style="font-weight: bold;">exarkun</span>:have any problem that using
non-thread safe code in a multithreaded way using any other threading api
could have<br />[2:16pm] <span style="font-weight: bold;">dash</span>:like
that, yeah<br />[2:17pm] <span style="font-weight:
bold;">exarkun</span>:inconsistencies, non-determinism, failure only under
load (ie, only after you deploy it), etc<br />[2:18pm] <span
style="font-weight: bold;">dash</span>:i smell a research paper<br />[2:18pm]
<span style="font-weight: bold;">oubiwann</span>:so, next question: how does
one determine that python code is thread safe or not?<br />[2:19pm] <span
style="font-weight: bold;">glyph</span>:a research *paper*?<br />[2:19pm]
<span style="font-weight: bold;">exarkun</span>:heh<br />[2:19pm] <span
style="font-weight: bold;">glyph</span>:research *industry* more like<br
/>[2:19pm] <span style="font-weight: bold;">oubiwann</span>:exarkun: or, if
not determine, at least ask the right sorts of questions to get the developer
thinking in the right direction<br />[2:20pm] <span style="font-weight:
bold;">dash</span>:glyph: Heh heh.<br />[2:20pm] <span style="font-weight:
bold;">exarkun</span>:oubiwann: well, is there shared mutable state? if you're
calling `fÂ´ in a thread, does it operate on objects not passed to it as
arguments?<br />[2:20pm] <span style="font-weight:
bold;">exarkun</span>:oubiwann: if not, then it's probably safe - although
don't call it twice at the same time with the same arguments<br />[2:20pm]
<span style="font-weight: bold;">exarkun</span>:oubiwann: if so, who knows<br
/>[2:20pm] <span style="font-weight: bold;">dash</span>:with the same mutable
arguments, anyway<br />[2:23pm] <span style="font-weight:
bold;">oubiwann</span>:exarkun: so, because python and/or the os doesn't do
anything to make file operations atomic, I'm assuming that reading and writing
file data is not threadsafe?<br />[2:24pm] <span style="font-weight:
bold;">exarkun</span>:don't use the same python file object in multiple
threads, yes.<br />[2:24pm] <span style="font-weight:
bold;">exarkun</span>:but certain filesystem operations are atomic, and you
can manipulate the same file from multiple threads (or processes) if you know
what you're doing<br />[2:25pm] <span style="font-weight:
bold;">oubiwann</span>:what about C extensions in Python? any general rules
there?<br />[2:25pm] <span style="font-weight: bold;">oubiwann</span>:other
than "if they're threadsafe, you can use them"<br />[2:25pm] <span
style="font-weight: bold;">exarkun</span>:that's about all you can say with
certainty<br />[2:26pm] <span style="font-weight: bold;">exarkun</span>:for
dbapi2 modules, look at the `threadlevelÂ´ attribute. that's about the most
general rule you can express.<br />[2:26pm] <span style="font-weight:
bold;">exarkun</span>:there's some stuff other than objects that gets shared
between threads too that might be worth mentioning<br />[2:26pm] <span
style="font-weight: bold;">exarkun</span>:at least to get people to think
about non-object state<br />[2:27pm] <span style="font-weight:
bold;">oubiwann</span>:such as?<br />[2:27pm] <span style="font-weight:
bold;">exarkun</span>:like, process working directory, or uid/gid<br
/>[2:30pm] â¢ oubiwann looks at deferToThread...<br />[2:31pm] â¢ oubiwann looks
at reactor.callInThread<br />[2:33pm] â¢ oubiwann looks at
ReactorBase.threadpool<br />[2:38pm] <span style="font-weight:
bold;">oubiwann</span>:hrm<br />[2:38pm] <span style="font-weight:
bold;">oubiwann</span>:internesting<br />[2:39pm] <span style="font-weight:
bold;">oubiwann</span>:never took the time to trace that all the way back to
(and then read) the Python threading module<br />[2:40pm] <span
style="font-weight: bold;">oubiwann</span>:exarkun: are there any python
modules well known for their lack of threadsafety?<br />[2:42pm] <span
style="font-weight: bold;">exarkun</span>:oubiwann: I dunno about "well
known"<br />[2:42pm] <span style="font-weight: bold;">exarkun</span>:oubiwann:
urllib isn't threadsafe<br />[2:42pm] <span style="font-weight:
bold;">exarkun</span>:neither is urllib2<br />[2:43pm] <span
style="font-weight: bold;">exarkun</span>:apparently random.gauss is not
thread-safe?<br />[2:43pm] <span style="font-weight: bold;">exarkun</span>:you
generally start with the assumption that any particular api is not
thread-safe<br />[2:44pm] <span style="font-weight: bold;">exarkun</span>:and
then maybe you can demonstrate to your own satisfaction that it's
thread-safe-enough for your purposes<br />[2:44pm] <span style="font-weight:
bold;">exarkun</span>:or you can demonstrate that it isn't<br />[2:45pm] <span
style="font-weight: bold;">exarkun</span>:grepping the stdlib for 'thread' and
'safe' is interesting<br />[2:45pm] <span style="font-weight:
bold;">oubiwann</span>:I wonder if the stuff available in math is
threadsafe....<br />[2:45pm] <span style="font-weight:
bold;">oubiwann</span>:exarkun: heh, I was just getting ready to dl the source
so I could do that :-)<br />[2:46pm] <span style="font-weight:
bold;">exarkun</span>:the math module probably is threadsafe<br />[2:46pm]
<span style="font-weight: bold;">exarkun</span>:maybe that's another
generalization<br />[2:46pm] <span style="font-weight:
bold;">exarkun</span>:stdlib C modules are probably threadsafe<br />[2:49pm]
<span style="font-weight: bold;">oubiwann</span>:hrm, looks like part of
random isn't threadsafe<br />[2:51pm] <span style="font-weight:
bold;">oubiwann</span>:random.random() is safe, though<br />[2:53pm] <span
style="font-weight: bold;">oubiwann</span>:exarkun: I really appreciate you
taking the time to discuss this<br />[2:53pm] <span style="font-weight:
bold;">exarkun</span>:np<br />[2:53pm] <span style="font-weight:
bold;">oubiwann</span>:and thanks to dash, glyph, and idnar for contributing
to the discussion :-)<br /><br /><span style="font-weight:
bold;">Summary</span><br /><br />Concurrency is hard. If you want to use
threads and you want to do it right and you want to avoid pitfalls and have
bug-free code, you're going to be doing some head-banging. If you want to use
an asynchronous framework like Twisted, you're going to have to bend your mind
in a different way.<br /><br />No matter what school of thought you follow for
any given project, the best results will come with full commitment and
immersion. Don't fear the learnin' -- embrace the pain ;-)<br /><br /><span
style="font-weight: bold;">Update</span>: Special thanks to Piet Delport for
sorting out my endless typos!<br /><br /><br /></div>