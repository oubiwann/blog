Subject: Bazaar with Subversion and Combinator
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: version-control,combinator,ubuntu,programming methodologies,bazaar,launchpad,subversion,development,howtos,divmod
Source: https://oubiwann.blogspot.com/2008/06/bazaar-with-subversion-and-combinator.html
Comments:
Content-Type: md
Public?: true

<div xmlns="http://www.w3.org/1999/xhtml">For the past couple days, I've been experimenting with using <a href="http://bazaar-vcs.org/">Bazaar</a> and <a href="http://divmod.org/trac/wiki/DivmodCombinator">Combinator</a> more or less simultaneously. As you may know by now, Combinator is a tool that wraps some of Subversion's ugliness (mostly merging), helps manage branches, and sets Python paths for development environments. We use it extensively (almost exclusively) at <a href="http://about.divmod.com/">Divmod</a>.<br /><br />One of my recent side projects has evolved into useful code more quickly than I had anticipated, so I thought I'd put it up on <a href="https://launchpad.net/">Launchpad</a> in the <a href="https://launchpad.net/tx">Twisted Community Code</a>. This, of course, led to questions about one-time imports, mirroring, and dual bzr/svn management. I eventually opted for the last, using the bzr plugin <a href="http://bazaar-vcs.org/BzrForeignBranches/Subversion">bzr-svn</a>. Not having a lot of experience with Bazaar, I was at a bit of a loss, at first: there don't seem to be any dummy docs to get us beginners up to speed.<br /><br />Through some painful, time-consuming trial and error and a couple dead ends, I arrived at a process that works for me, and codified it in a script. The comments in that script seemed generally useful, and given the dearth of docs, I thought I'd turn the comments into a blog post.<br /><br /><b>The Plugin</b><br /><br />Once I figured out the right way to use bzr-svn, it was actually much easier than I thought it would be. Here are the basics: you need to have bzr installed and then you need to install bzr-svn, which is actually a bzr plugin and not a separate tool. When you have bzr-svn installed, you will have additional bzr commands at your disposal which, as you might guess, let you interoperate with an svn repository.<br /><br /><b>Two Become One</b><br /><br />So here's how you get started: create your Subversion branch (we use Combinator) and get your working dir ready to code. You can either add dirs and files now, or do that later; it doesn't matter.<br /><br />Then, in this working directory, perform a bzr checkout:<br /><pre><br />bzr co . bzrtest<br />cd bzrtest</pre><br />This will create a Bazaar branch from your Subversion (Combinator) branch. 'bzrtest' (or whatever you name it) is your new bzr+svn branch and it is here where you'll be doing all of your work, committing, pushing to Subversion, and (in my case) pushing to Launchpad.<br /><br />If your Subversion repository has a long history, you probably don't want to perform a 'bzr update' -- that'll just end in tears (it could take days to finish, use up lots of memory, require multiple restarts, and consume disk space by the gigaliter).<br /><br /><b>Launchpad</b><br /><br />For my project, I had already registered a branch on Launchpad via the web interface, so I was ready to push the new Bazaar branch just created with the checkout command above:<br /><pre><br />bzr push lp:~oubiwann/txevolver/dev --use-existing-dir</pre><br />I then logged into the web interface again, and set this newly pushed branch as the main development effort for the project. All future pushes (during this development phase) will now be done with the following command:<br /><pre><br />bzr push lp:txevolver</pre><br />Future commit-push cycles just look like this:<br /><pre><br />bzr commit --local -m "My message"<br />bzr push lp:txevolver</pre>Keep in mind that you can do multiple commits with Bazaar before you push to a server.<br /><br /><b>The Divmod Repo</b><br /><br />Once you've done a local commit (or many local commits), you're ready to start pushing changes to your Subversion repository. This is where you use one of the commands that is provided by the bzr-svn plugin:<br /><pre><br />bzr svn-push svn+ssh://myRepo</pre><br />And in my case, that's the following:<br /><pre><br />bzr svn-push \<br />svn+ssh://divmod.org/svn/Divmod/branches/genetic-programming-2620/Evolver</pre><br />If you have done more than one local commit since your last push, you'll see a series of commits made to your svn repo after you issue the 'svn-push' command.<br /><br /><b>All Together Now</b><br /><br />The script I mentioned at the beginning of this post is <a href="http://divmod.org/trac/browser/branches/genetic-programming-2620/Evolver/admin/commit.sh">here</a>. With it, I run a single command which extracts my commit message from the ChangeLog diff, commits locally, pushes to the Divmod svn repo and then pushes to Launchpad. A single command does everything I need, now: maintaining changes in both a bzr repo that can be easily branched by others on Launchpad as well as in my Subversion branch at work.<br /><br />Once this project is ready to merge to trunk (if, in fact, it's final home is to be the Divmod svn repo), I'll do an svn up in the Combinator-created branch, unbranch, and commit to trunk. Upon the suggestion of JP, I'll probably also clean up the bzr-svn-created svn props, but other than that, overhead seems to be zero.<br /><br /><hr /><br /><span style="font-weight: bold;">Subversion Update</span>: I've been playing with this more, and here's another tidbit I didn't find documented anywhere: If you do a fresh bzr branch that had been associated with a svn repo in another working directory, you will need to rebind it to the svn repo you were working with before. You do that with the following command:<br /><pre><br />bzr bind svn+ssh://svn.yourhost.com/repo/YourProject/trunk</pre><br /><span style="font-weight: bold;">Google Code Update</span>: If you are sync'ing a bzr branch with googlecode's subversion, you will need to prefix your initial push with svn:<br /><pre><br />bzr push svn+https://yourproject.googlecode.com/svn/trunk</pre><br />Likewise, if you need to rebind, you'll use the following:<br /><pre><br />bzr bind svn+https://yourproject.googlecode.com/svn/trunk</pre><br /></div>