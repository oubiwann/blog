Subject: Object Publishing with Nevow
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: 
Source: https://oubiwann.blogspot.com/2007/02/object-publishing-with-nevow.html
Comments:
Content-Type: md
Public?: true

<b>Update</b>: Code for the "Nevow Object Series" of blog posts is available
<a href="http://adytum.svn.sourceforge.net/viewvc/adytum/Docs/nevow/objectpubl
ishing/introduction/">here</a>. Note that the examples can be viewed and run
as single files or "project style" with code broken out into separate
files.<br /><br />Object publishing is a very simple concept: making code
objects accessible over some medium. The medium most often discussed, due to
the prevalence of web applications is HTTP/S. For our purposes, the published
objects we will discuss are instantiations of python classes written to
provide resources over the network.<br /><br />In the python community, the
most famous example of object publishing is the Zope application server. Zope
exposes object written in python or with various Zope scripts/products/etc. In
an old <a href="http://www.zope.org/Documentation/Books/ZDG/current">Zope 2
Book</a>, Zope's object publishing is broken down very simply:<br
/><ol><li>The client sends a request to the server</li><li>The server locates
the object using the request URL as a map</li><li>The server calls the
published object with arguments from the request.</li><li>The server
interprets and returns the results to the client</li></ol>What we have here is
essentially object look-ups by URL. Given the web context, this makes obvious
sense.<br /><br />With such a simple definition of "object publishing", we can
begin seeing "object publishing" pretty much anywhere python is used to
deliver content or other resources on the web. For instance, <a
href="http://www.djangoproject.com/">Django</a> qualifies as having an object
publisher by means of the configuration mechanism whereby one can use regular
expressions to map URLs to its "view" objects. We'll come back to Django in a
bit.<br /><br /><a href="http://twistedmatrix.com/trac">Twisted</a>'s web
"framework" <a
href="http://divmod.org/trac/wiki/DivmodNevow%20Nevow">Nevow</a> has a
object-publishing capabilities that, due to it being controlled by python
classes is limited only by the python code you can write. There are four
primary mechanisms by which one can publish objects in Nevow:<br
/><ul><li>child attributes on a resource</li><li>child methods on a resource,
or</li><li>dynamic children using the <span
style="font-family:monospace;font-size:9pt;">childFactory()</span> method</li>
<li>manipulating the traversal of objects via <span
style="font-family:monospace;font-size:9pt;">locateChild()</span> method</li><
/ul>I will be focusing on the first two, however, before showing examples of
these let's cover some minimal background. Twisted services are commonly run
using what's called a <span
style="font-family:monospace;font-size:9pt;">.tac</span> file ("Twisted
Application Configuration"). Here is a trivial example of this:<br /><pre>from
twisted.application import service<br />from twisted.application import
strports<br /><br />from nevow import appserver<br /><br />import stuff<br
/><br /># instantiate the application<br />application =
service.Application('Site')<br /><br /># set up the main resource<br />root =
mystuff.SiteRoot()<br />site = appserver.NevowSite(root)<br /><br /># setup
the web server<br />server = strports.service('tcp:8080', site)<br
/>server.setServiceParent(application)<br /></pre>Give than this file was
saved as <span style="font-family:monospace;font-size:9pt;">site.tac</span>
(and that there was a sibling file named <span
style="font-family:monospace;font-size:9pt;">stuff.py</span> with the resource
<span style="font-family:monospace;font-size:9pt;">SiteRoot</span> defined),
you would enter <span style="font-family:monospace;font-size:9pt;">twistd -noy
site.tac</span> at the system prompt to run this. This would start a server
listening on port 8080. But what is <span
style="font-family:monospace;font-size:9pt;">SiteRoot</span>? It is a resource
we are making available at the root of our application, "publishing" it at
http://localhost:8080/. And what would it look like, you ask? Well, a silly
example of <span style="font-family:monospace;font-size:9pt;">stuff.py
</span>that define <span
style="font-family:monospace;font-size:9pt;">SiteRoot</span> might be
something like the following:<br /><pre>from nevow import rend<br />from nevow
import loaders<br /><br />class SiteRoot(rend.Page):<br /><br /> docFactory =
loaders.xmlstr('''&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0<br />
Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;<br />
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"<br />
xmlns:nevow="http://nevow.com/ns/nevow/0.1"&gt;<br /> &lt;/html&gt;''')<br
/></pre>One reason that this is a silly example is that it does nothing other
than declare that the published resource will be an XHTML file with a Nevow
namespace, providing no methods (and little content). Additionally, it uses
the XML "string" loader, instead of using <a
href="http://www.kieranholland.com/code/documentation/nevow-stan/">stan</a> or
the XML file loader (for using templates from disk). Regardless, if we add a
child attribute that points to another class, we can start to see the object
publishing behavior of Nevow:<br /><pre>from nevow import rend<br />from nevow
import loaders<br /><br />class MyStuffResource(rend.Page):<br /><br />
docFactory = loaders.xmlstr('''&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML
1.0<br /> Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;<br /> &lt;html
xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"<br />
xmlns:nevow="http://nevow.com/ns/nevow/0.1"&gt;<br /> &lt;h1&gt;My
Stuff&lt;/h1&gt;<br /> &lt;/html&gt;''')<br /><br />class
SiteRoot(rend.Page):<br /><br /> docFactory = loaders.xmlstr('''&lt;!DOCTYPE
html PUBLIC "-//W3C//DTD XHTML 1.0<br /> Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;<br /> &lt;html
xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"<br />
xmlns:nevow="http://nevow.com/ns/nevow/0.1"&gt;<br /> &lt;/html&gt;''')<br
/><br /> child_mystuff = MyStuffResource()<br /></pre>Starting up our
application with these changes will allow us to access the root and child
object via the following URLs, respectively:<br
/><ul><li>http://localhost:8080/</li><li>http://localhost:8080/mystuff</li></u
l>This demonstrates how to publish objects via the <span
style="font-family:monospace;font-size:9pt;">child_</span> attribute. <span
style="font-family:monospace;font-size:9pt;">child_*() </span>methods do the
same thing, while offering all the flexibility that comes with methods. For
instance, we could define the method <span
style="font-family:monospace;font-size:9pt;">child_yourstuff(self, context)
</span>in <span style="font-family:monospace;font-size:9pt;">SiteRoot
</span>that would check for your username in the application cookie and pass
that info when instantiating a <span
style="font-family:monospace;font-size:9pt;">UserStuffResource</span> class.
Then the URL http://localhost:8080/yourstuff could publish data specific to
whatever was available in a data source associated with the username. The
<span style="font-family:monospace;font-size:9pt;">child_*() </span>methods do
need to return a resource object, though.<br /><br />This has been a brief
run-down on how you can use <span
style="font-family:monospace;font-size:9pt;">child_*()</span> methods and
<span style="font-family:monospace;font-size:9pt;">child_</span> attributes to
publish objects. In the next installment, I will show how to customize URL
traversal for accessing these resources via the <span
style="font-family:monospace;font-size:9pt;">locateChild()</span> method. In
particular, I will show how to duplicate the Django URL conf functionality in
Nevow.<br /><br /><!-- technorati tags start --><p
style="text-align:right;font-size:10px;">Technorati Tags: <a
href="http://www.technorati.com/tag/nevow" rel="tag">nevow</a>, <a
href="http://www.technorati.com/tag/python" rel="tag">python</a>, <a
href="http://www.technorati.com/tag/twisted" rel="tag">twisted</a>, <a
href="http://www.technorati.com/tag/web" rel="tag">web</a></p><!-- technorati
tags end -->