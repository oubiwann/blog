Subject: Python-esque Imports in JavaScript
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: 
Source: https://oubiwann.blogspot.com/2006/04/python-esque-imports-in-javascript.html
Comments:
Content-Type: md
Public?: true

<div xmlns="http://www.w3.org/1999/xhtml"><i class="categories">programming :: javascript :: web</i><br/><br/><div class="entry"><br /><p><br />Caveat 1: It has been several years since I've been forced to work with <br />JavaScript. Caveat 2: This has either been done before and considered <br />stupid or done before and done better. If so, I'm sure I'll hear about <br />it :-)<br /></p><p/>And before I get started, I've been meaning to blog about<br /><a href="http://mochikit.org/">MochiKit</a>. I've got all sorts of good <br />things to say about it, but I'm so busy using it that I'm not sure I'll <br />ever get around to it. Among the many reasons that people rave about <br />MochiKit, let me say that the first and foremost should be what the <br />MochiKit team has done most for JavaScript: coding convention. Even <br />though there are lots of stylistic inconsistencies in the various <br />MochiKit libraries, compared to JavaScript in the wild, it is a <br />completely unified whole. Wild JavaScript is generally pure shite.<p/>Back to the topic: the project I am working on right now has multiple <br />"screens" that are loaded depending on user interaction. Pretty common <br />fare. But I really didn't want to load all the DOM manipulation stuff <br />in a series of *.js files on page load. There are WAY to many files for <br />this. So I wrote importLibrary().<p/>My first attempt at writing this function was to append script tags to <br />HEAD with the proper source information in it. Which works... <br />eventually -- the js source just isn't available immediately. So here's <br />what I did:<br /><pre><br /> req = getXMLHttpRequest();<br /> req.open('GET', file, false);<br /> req.send('');<br /> js = req.responseText;<br /> eval(js);<br /></pre><br /><p><br />Now, as far as I know, there is no reason to object to the "eval()" <br />call here, since this is just the same thing (again, as far as I know) <br />as when your browser downloads the file by itself. This filename is not <br />parsed from a URL or derived from any human input.<p/>In addition, I wrote a little function for parsing the import <br />parameters so that<br /><pre><br />importLibrary('MyProject.ThisSection.ThisScreen')<br /></pre><br />maps to a file available at an arbitrary (pre-determined per-project) <br />location off of docroot on the web server.<br /></p><br/><br/><br /><p>The import itself has to be done synchronously to ensure that JS code <br />is available to everything after the called to import. Right now, I <br />have it doing simple checking to see if the js file has already been <br />imported, and if so, skips it. I would like to add some kind of "use <br />queue" as well, where most frequently clicked screens are bumped to the <br />top (or bottom), and those least visited are pushed off the queue and <br />then not maintained in HEAD.<p/>This has really enabled me to organize the code for the project in a <br />sane way.<p/></div><br/><br /><div blog="now_playing"> Now playing:<br /> <pre>Glenn Gould - The Art of Fugue, BWV 1080: Contrapunctus IX (a 4, alla Duodecima)</pre></div></div>