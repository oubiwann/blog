Subject: Unit Tests: No really, you HAVE to use them
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: 
Source: https://oubiwann.blogspot.com/2006/02/unit-tests-no-really-you-have-to-use.html
Comments:
Content-Type: md
Public?: true

<div xmlns="http://www.w3.org/1999/xhtml"><i class="categories">twisted :: programming :: testing</i><br/><br/><div class="entry"><br /><p>So, for the pycon sprint this year, I figured I'd work virtually <br />with some other developers who couldn't make it this year. There has <br />been some interest and requests on the pymon mail lists... I strongly <br />believe that patience and loyalty should be rewarded, and these guys <br />have put up with an awful lot of delays and bugs... and circumstances <br />beyond anyone's control.</p><p/>The first thing I wanted to do was get a usable release candidate <br />available for them to download. After digging back into the code, I <br />realized that the best way to provide this was by patching up the <br />already-extant pymon RC2. With RC2 operable, I tried fixing some bugs <br />for later code changes, and I couldn't. The code was a mess. But not <br />anything most people would ever notice or even care about.<p/>Here's what I mean: in the last big merge, we brought in all the <br />twisted code, and then proceeded to clean that up... but people wanted <br />to use it soon, and writing tests slowed us down, so we skipped it. It <br />is debatable whether that was the right thing to do, since it is really <br />important to weigh your user base when making such decisions. Being a <br />purist at heart, I'm really wishing it was possible to have pleased the <br />users and take the time needed to add the tests. Regardless, I have to <br />add them now. The project simply will not progress without it. I cannot <br />currently debug effectively without them.<p/>But there is something more important here, the REAL reason I need to <br />add unit tests. When I tried to add them yesterday, I realized my code, <br />as it was, simply wouldn't allow it. This means my code is bad. Plain <br />and simple. It means that there really aren't "units" to test, and that <br />means the code is not well-enough thought out. After looking at the <br />problematic code yesterday, it appears pymon will be a good candidate <br />for componentization. This will:<br /><ol><br /><li>Provide clear units than will be much more easily testable as <br />units</li><br /><li>Clean the code up considerably</li><br /><li>Come more in line with the standards and best practices of the core <br />twisted code</li><br /></ol><p/>By adding unit tests early on in a project's life, you are giving <br />yourself the chance to benefit from a design litmus test. If your <br />twisted code lends itself more or less easily to twisted.trial, then <br />there is also a good chance that you have something that is workably <br />modular. For me, this will mean that I can accept all sorts of feature <br />additions and increased application sophistication without affecting <br />the quality, readability, or testability of the code. The code will <br />remain clean and simple. There will just be an increased number of <br />components.<p/><div blog="now_playing"> Now playing:<br /> <pre>Yes - No Opportunity Necessary, No Experience <br />Needed</pre><br/></div><p/><br /></div><br/></div>