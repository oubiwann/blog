Subject: Full Text Search with Storm and PosgreSQL 8.3
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: ubuntu,landscape,postgres,postgresql,canonical
Source: null
Comments:
Content-Type: md
Public?: true

<div><br /><font style="font-weight: bold;" size="3">Introduction</font><br /><br />At <a href="http://www.canonical.com/">Canonical</a>, we recently decided to provide a knowledge base in our <a href="https://landscape.canonical.com/">Landscape</a> product. The pros and cons for developing this in-house were weighed judiciously, and in the end, the balance tipped to building our own. Ordinarily, one might think a team would be better off integrating 3rd party software... but our team isn't ordinary :-) There is a lot of fantastic stuff these guys have created over the last few years that can be brought to bear in just about any software project, enabling visions to reach fruition quickly.<br /><br />Last November, Twisted developer <a href="https://launchpad.net/~therve/+related-projects">Thomas Herv√©</a> and I worked on the KB code together, joined by long-time <a href="https://landscape.canonical.com/">Landscape</a> developer <a href="https://launchpad.net/~jkakar/+related-projects">Jamu Kakar </a>for some sweet, sweet styles and page layouts. We made amazing progress and were able to deliver ahead of schedule. One of the reasons for this is the awesome tool chain we have, in particular, <a href="http://bazaar-vcs.org/">bzr</a> (multiple, dependent, in-progress branches easily managed and updated with each other and trunk).<br /><br />As a result of being ahead of schedule, our tech lead <a href="http://blog.labix.org/">Gustavo Niemeyer</a> had started looking for future-planned features that we could research and prepare, if not implement, immediately. One of the features that made this list was full text search.<br /><br />The <a href="http://www.postgresql.org/docs/8.3/static/textsearch-intro.html">PostgreSQL 8.3 manual, chapter 12</a>, gives an excellent definition of full text search in their opening paragraph:<br /><blockquote>Full Text Searching (or just text search) provides the capability to identify natural-language documents that satisfy a query, and optionally to sort them by relevance to the query.</blockquote>Mind you, this is not anywhere close to simple LIKE or even regex searches.<br /><br />So let's get startred :-)<br /><br /><font style="font-weight: bold;" size="3">Postgres Preparation</font><br /><br />One of the things we wanted to support with text search in our knowledge base was strong <a href="http://en.wikipedia.org/wiki/Stemming">stemming</a> (Google's search is famous for its good stemming). In order to do this, we needed some dictionary files that supported this, and the Postgres docs recommended ispell. These files needed to be converted to UTF-8, so here's what we did:<br /><br />TBD<br /><br />Martin Pitt at Canonical has been working with the Postgres folks to get this included in a future release so that you won't have to do all that work anymore.<br /><br /><font style="font-weight: bold;" size="3">Schema Changes</font><br /><br />With the proper files in place, we then needed to override the default (ASCII) text search. These requirements resulted in the following SQL:<br /><br />TBD<br /><br /><font style="font-weight: bold;" size="3">Postgres Text Search SQL</font><br /><br />The SQL that performs full text search in Postgres looks a little odd at first:<br /><br />TBD<br /><br />The parts that might jar the eyes a bit are:<br /><ul><li>the new <font face="courier new">to_tsvector</font>, <font face="courier new">to_tsquery</font>, <font face="courier new">ts_rank_cd</font>, and <font face="courier new">ts_headline</font> functions</li><li>the match operator</li><li>compound search expression<br /></li></ul> For a full and accurate understanding of these, I recommend a thorough reading of the afore-mentioned manual, Chapter 12. For now, though, here are some quick pass definitions:<br /><br /><font style="font-style: italic;">ts_vector</font> - Converts a document (text) to a preprocessed representation that is needed for text search.<br /><br /><font style="font-style: italic;">ts_query</font> - Converts and normalizes query strings to that they can be easily compared to documents in tsvector-format.<br /><br /><font style="font-style: italic;">ts_rank_cd</font> - Measures query relavance to documents; it "take[s] into account lexical, proximity, and structural information [...] consider[s] how often the query terms appear in the document, how close together the terms are in the document, and how important is the part of the document where they occur."<br /><br /><font style="font-style: italic;">ts_headline</font> - Returns an excerpt from a matched document with found search terms highlighted in markup.<br /><font style="font-style: italic;">@@</font> - The match operator is an odd-looking creature that does what you might think: returns a Boolean for the search expression as matched against a document's text search vector.<br /><font style="font-style: italic;">search terms</font> - These are single words separated by the Boolean operators <tt class="LITERAL">&amp;</tt> (AND), <tt class="LITERAL">|</tt> (OR) and <tt class="LITERAL">!</tt> (NOT) and may be grouped with parenthesis to determine proper precedence.<br /><br />The sample SQL query above does not take indexing into consideration, nor a table column that preprocesses the document title and body into a text search vector. Here is what we used to set these up:<br /><br />TBD<br /><br /><font style="font-weight: bold;" size="3">Storm Customizations</font><br /><br />Most of my Storm usage over the past couple years has been pretty tame. Probably, the most exciting thing I've done is used Thomas' <a href="https://code.launchpad.net/~therve/storm/twisted-integration">Twisted integration branch</a>. Or 1-to-many relationships. So when I put together the SQL we were going to need, I had to talk to the team. <a href="http://radix.twistedmatrix.com/">Chris Armstrong</a> gave me some awesome pointers, and I'm delighted to share these with a wider audience. The cleverness involved is all under the covers, making it very easy for devs to extend Storm -- but I highly recommend taking a look at how Storm makes this possible... it's a delight :-)<br /><br />Chris showed me some files with examples, the end result being a few simple subclasses:<br /><br />TBD<br /><font style="font-weight: bold;" size="3"><br /></font><font style="font-weight: bold;" size="3">Storm Full Text Search</font><br /><br />With the Postgres configuration in place, the schema set up, and our text-search-specific Storm customizations made, we're ready to perform full text search with Storm:<br /><br />TBD<br /><br />I've created a storm branch with the full text search example code in it. You can browse the code here. You can also do the usual:<br /><br />bzr branch lp:~oubiwann/storm/storm-examples<br /><br /><font style="font-weight: bold;">Summary</font><br /><br />The biggest chunk of this work is DBA stuff, really. Then some sysadmin tasks. Once all that's done, the programmer only has to do a few tasks: create a class object, define the functions, and then reap the usability and productivity benefits of working with a well thought-out ORM. This is world-class search with a world-class ORM: both a user's <font style="font-style: italic;">and</font> a programmer's dream :-)<br /><br /><br /></div>