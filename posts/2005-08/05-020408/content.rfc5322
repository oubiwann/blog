Subject: Django vs. Zope3, or "The Right Web App Dev Platform"
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: 
Source: https://oubiwann.blogspot.com/2005/08/django-vs-zope3-or-right-web-app-dev.html
Comments:
Content-Type: md
Public?: true

<div xmlns="http://www.w3.org/1999/xhtml"><i class="categories">development ::
python :: zope 3 :: django</i><br/><br/><p/><br /><div blog="entry"><br
/>First of all, let me start off by saying that this is not a flame nor a <br
/>crusade :-) The title of this post needs to be taken in context: this <br
/>is about making the right choices for you, the developer. We are not <br
/>machines, we are quirky people, each with our own uniquenesses. The <br
/>choice of platform needs to be as much about what technology best fits <br
/>the needs of the project as well as that which fits the personality, <br
/>the strengths, and the weaknesses of the developer.<p>I just spent an
interesting two days with django. Let me just say, <br />right off the bat: I
like it, it's fun, it's cool. I like their site, <br />their growing docs
(I've contributed a little to the wiki), the homey <br />feel of the project.
I got my first little app up and running in no <br />time. Piece of cake, just
as advertised.</p><p>However, for my second project, I wanted to do something
a little <br />strange. Oddly enough, just the kind of irregular thing a
client would <br />ask for. Thus began the headaches. I spent about 30 hours
with my head <br />up against the wall. I will say that my primary problem was
not <br />understanding the not-so-documented subtleties of django.
Additionally, <br />I'm really not that good at database modeling. Object
relational <br />mappers are cool (much better than having to write SQL), but
to me, the <br />logical next step is to give up the ghost and use an
object-oriented <br />database. For situations that require hard-core
databases, hire the <br />dba/db designer, and do what's needed.</p><p>It was
tough going. I really wanted to do some strange things, and <br />django
didn't seem to be so flexible in different areas. And I think <br />that's
actually something that the django developers have openly <br />stated. They
have written and are targeting their software for a narrow <br />problem
domain, a domain that brings them a lot of business and for <br />which there
is great need.</p><p>I want to emphasize that I'm not a python or software
noob. I've been <br />writing code, in one language or another, since 1981.
I've been in the <br />industry since 1994. I've worked with twisted for a
couple years, more <br />so recently. I regularly delve into its internals. I
have a love/hate <br />relationship with Zope: I love z3 and hate Zope2. I
spend a fair amount <br />of time digging through z3 code and find it (almost
entirely) <br />delightful. However, I don't have any of that experience with
django. <br />The source code doesn't make architectural sense to me. I guess
I like <br />and use frameworks, and django's actually really an application
and not <br />a framework. This is reflected in the code, and I have
difficulty with <br />that.</p><p>So, as I slugged through the issues of
bending django to my will, I <br />found myself wishing for things: what would
it take to add ZPT support <br />to django's templating? Could a
wrapper/adaptor be written for the ORM <br />so that ZODB could be used? Could
the code be refactored to use <br />interfaces, adaptors and components? Yup.
I was unconsciously trying to <br />rewrite djando into z3. However, this is
also flattering to django: I <br />was trying to hang on as long as I could.
Why? Well, it's got some <br />really cool things:</p><p>* a fantastic look
and feel<br />* a slick admin interface generation (z3 has auto-generation of
this <br />too, but it's not as pretty)<br />* really cool URL dispatcher for
custom URLs perl application</p><p>Overall, they did some great work. They
sell the point that you can <br />build apps in record time with django. And
they're right -- you can. <br />But you know what else? I was able to build a
project from the ground <br />up with z3 in two days -- and that *included*
learning curve. No <br />kidding. Talk about rapid. I was stunned. In fact,
after that <br />experience, I emailed several close developer friends of mine
as well <br />as a few partner companies we consult for. I did a write-up on
the <br />project and an analysis of the z3 development process and how it <br
/>benefits our timelines. The reason things went so smoothly with z3 is <br
/>because it's designed the way I think. By using a framework that <br
/>matches me so well, I move through code with zero resistance and get a <br
/>tremendous about of work done.</p><p>I'm not trying to sell z3 here. But,
what I did discover with django <br />was that it's not my platform for web
app dev: z3 is. This is because <br />of the kind of developer I am, the kind
of code I like to work with, <br />and the kind of tools that allow me to be
as productive as possible. <br />This combination of factors is different for
different developers. As <br />many others in the community have pointed out,
pick the right tools for <br />you and the job. There's a lot of hype about
Rails, Django, etc., these <br />days; all the different web platforms
available for python. People are <br />complaining about proliferation, but
that's what drives evolution. <br />Software evolution has provided me with
great business tools: twisted <br />and z3. What's it provided
you?</p><p/></div><br /></div>