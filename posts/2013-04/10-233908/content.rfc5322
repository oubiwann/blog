Subject: The Lambda Calculus: A Quick Primer
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: λ-calculus,notation,programming,lambda calculus,math
Source: https://oubiwann.blogspot.com/2013/04/the-lambda-calculus-quick-primer.html
Comments:
Content-Type: md
Public?: true

<div class="separator" style="clear: both; text-align: center;"><a
href="http://3.bp.blogspot.com/-6VOclHLsn8U/UWMiLE5aa0I/AAAAAAAAAEY/SrJ6d2vVi9
s/s1600/Lambda.png" imageanchor="1" style="clear: right; float: right;
margin-bottom: 1em; margin-left: 1em;"><img border="0"
src="http://3.bp.blogspot.com/-6VOclHLsn8U/UWMiLE5aa0I/AAAAAAAAAEY/SrJ6d2vVi9s
/s200/Lambda.png" height="200" width="200" /></a></div><b>The λ-Calculus
Series</b><br /><ol><li><a
href="http://technicae.cogitat.io/2013/04/the-lambda-calculus-brief-history.ht
ml">A Brief History</a></li><li>A Quick Primer for
λ-Calculus</li><li>Reduction Explained</li><li>Church
Numerals</li><li>Arithmetic</li><li>Logic</li><li>Pairs and
Lists</li><li>Combinators</li></ol>To the untrained eye, the notation used in
λ-calculus can be a bit confusing. And by "untrained", I mean your average
programmer. This is a travesty: reading the notation of λ-calculus should be
as easy to do as recognizing that the following phrase demonstrates variable
assignation:<br /><blockquote class="tr_bq"><span style="font-family:
&quot;Courier New&quot;,Courier,monospace;">x = 123</span></blockquote>So how
do we arrive at a state of familiarity and clarity from a starting state of
confusion? Let's dive in with some examples, and take it step at a time :-)
Once we've got our heads wrapped around Alonzo Church's notation, we'll be
able to easily read it -- and thus convert it into code! (We will have lots of
practice in the coming posts to do just that.)<br /><br /><b>A Quick Primer
for λ-Calculus</b><br /><br />Here's one of the simplest definitions in
λ-calculus that you're going to see: the identity function:<br /><blockquote
class="tr_bq"><span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">λx.x</span></blockquote>This reads as "Here is a
function that takes <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">x</span> as an argument and returns <span
style="font-family: &quot;Courier New&quot;,Courier,monospace;">x</span>."
Let's do some more:<br /><blockquote class="tr_bq"><span style="font-family:
&quot;Courier New&quot;,Courier,monospace;">λxy.x</span></blockquote>"Here is
a function that takes <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">x</span> and <span style="font-family:
&quot;Courier New&quot;,Courier,monospace;">y</span> as arguments and returns
only <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">x</span>."<br /><blockquote class="tr_bq"><span
style="font-family: &quot;Courier
New&quot;,Courier,monospace;">λx.</span><span style="font-family:
&quot;Courier New&quot;,Courier,monospace;"><span style="font-family:
&quot;Courier New&quot;,Courier,monospace;">λy.</span>xy</span></blockquote>"A
n outer function takes <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">x</span> as an argument and an inner function
takes <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">y</span> as an argument, returning the <span
style="font-family: &quot;Courier New&quot;,Courier,monospace;">x</span> and
the <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">y</span>." Note that this is exactly equivalent
to the following (by convention):<br /><blockquote class="tr_bq"><span
style="font-family: &quot;Courier
New&quot;,Courier,monospace;">λxy.xy</span></blockquote>Let's up the ante with
a function application:<br /><blockquote class="tr_bq"><span
style="font-family: &quot;Courier
New&quot;,Courier,monospace;">λf.</span><span style="font-family:
&quot;Courier New&quot;,Courier,monospace;"><span style="font-family:
&quot;Courier New&quot;,Courier,monospace;">λ</span>x.f
x</span></blockquote>"Here is a function that takes a function <span
style="font-family: &quot;Courier New&quot;,Courier,monospace;">f</span> as
its argument; the inner function takes <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">x</span> as its argument; return the result of
the function <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">f</span> when given the argument <span
style="font-family: &quot;Courier New&quot;,Courier,monospace;">x</span>." For
example, if we pass a function <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">f</span> which returns its input multiplied by
2, and we supplied a value for <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">x</span> as 6, then we would see an output of
12. <br /><br />Let's take that a little further:<br /><blockquote
class="tr_bq"><span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">λ</span><span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">f.</span><span style="font-family: &quot;Courier
New&quot;,Courier,monospace;"><span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">λ</span>x.f (f (f x))</span></blockquote>"Here
is a function that takes a function <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">f</span> as its argument; the inner function
takes <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">x</span> as its argument. Apply the function f
to the argument <span style="font-family: &quot;Courier
New&quot;,Courier,monospace;">x</span>; take that result and apply <span
style="font-family: &quot;Courier New&quot;,Courier,monospace;">f</span> to
it. Then do it a third time, returning that result." If we had the same
function as the example above and passed the same value, our result this time
would be 48 (i.e., 6 * 2 * 2 * 2).<br /><br />That's most of what you need to
read λ-calculus expressions. Next we'll take a peek into the murky waters
of&nbsp; λ-calculus reduction and find that it's quite drinkable, that we were
just being fooled by the shadows.<br /><br /><br />