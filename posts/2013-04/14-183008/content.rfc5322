Subject: Getting Started with LFE on Ubuntu
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: rebar,ubuntu,erlang,lfe,repl,kerl,howtos,elixir,programming,lisp,modules,joxa
Source: https://oubiwann.blogspot.com/2013/04/getting-started-with-lfe-on-ubuntu.html
Comments:
Content-Type: md
Public?: true

<div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-Zqe5Lmg49Sc/UWs6VpQITjI/AAAAAAAAAEk/qO7_SEd0mek/s1600/LFE-on-Ubuntu.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-Zqe5Lmg49Sc/UWs6VpQITjI/AAAAAAAAAEk/qO7_SEd0mek/s320/LFE-on-Ubuntu.png" height="239" width="320" /></a></div>For those that don't know, there is a fully <a href="http://erlangcentral.org/">Erlang</a> Core-compatible <a href="http://en.wikipedia.org/wiki/Lisp-1_vs._Lisp-2#The_function_namespace">Lisp-2</a> that runs on the Erlang VM and produces <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">.beam</span> files that can be used in any Erlang application. This manna from heaven is <a href="https://github.com/rvirding/lfe/">LFE</a>, or Lisp Flavored Erlang. It was started about 5 years ago by <a href="http://rvirding.blogspot.com/">Robert Virding</a>, one of the co-creators of the Erlang programming language, and has inspired other similar efforts: <a href="http://elixir-lang.org/">Elixir</a> (a Ruby-alike) and <a href="http://joxa.org/">Joxa</a> (a Lisp-1). (Incidentally, Robert has also created <a href="https://github.com/rvirding/erlog">Prolog</a> and <a href="https://github.com/rvirding/luerl.git">Lua</a> implementations that run on top of the Erlang VM!)<br /><br />The new <a href="http://lfe.github.io/">LFE docs site</a> (a continuous work in progress) has some good introductory materials for the curious reader:<br /><ul><li>A <a href="http://lfe.github.io/quick-start/1.html">Quick Start</a> guide </li><li>An as yet incomplete <a href="http://lfe.github.io/user-guide/intro/1.html">User Guide</a> (most of the introductory chapters are finished)</li><li>A tutorial on Erlang's <a href="http://lfe.github.io/tutorials/processes/1.html">Lightweight Processes in LFE</a>.</li></ul><br />This blog post aims to bring some of those hidden materials into the consciousness of Ubuntu users. If you are averse to Erlang syntax, LFE opens up a whole new world to you :-)<br /><br />The examples below assume Ubuntu 12.10. <br /><br /><br /><b>Getting Erlang</b><br /><br />Erlang R15B01 comes with Ubuntu 12.10. If that's all you need, then this will suite you just fine:<br /><blockquote><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ sudo apt-get install erlang</span></blockquote>If you are wanting to test against multiple versions of Erlang, you should check out the <a href="https://github.com/spawngrid/kerl">kerl</a> project, which lets you install a wide variety of Erlang versions (including the latest releases) side-by-side.<br /><br />You'll also need git, if you don't yet have it installed:<span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><br /></span><br /><blockquote><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ sudo apt-get install git</span></blockquote>Currently, <a href="https://github.com/rebar/rebar">rebar</a> is required to build all the LFE files. If you're going to be building LFE projects, you'll want this anyway ;-) Rebar will be in Ubuntu 13.04, but it's not in 12.10, so you'll need to get it:<br /><blockquote class="tr_bq"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ wget https://github.com/rebar/rebar/wiki/rebar</span><br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ chmod 755 rebar</span><br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ sudo mv rebar /usr/local/bin</span></blockquote><br /><br /><b>Getting and Building LFE</b><br /><br />Here's what you need to do to build LFE:<br /><blockquote class="tr_bq"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ mkdir -p ~/lab/erlang &amp;&amp; cd ~/lab/erlang</span><br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ git clone https://github.com/rvirding/lfe.git</span><br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ cd lfe</span><br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ make compile</span></blockquote>If you looked at your <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">./ebin</span> directory when you cloned the repo, you would have seen that there were no <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">.beam</span> files in it. After compiling, it is full of <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">.beam</span>s ;-)<br /><br />Sidebar: A common pattern in Erlang applications is the use of a <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">deps</span> directory under one's project dir where dependencies can be installed without conflicting with any system-wide installs, providing versioning independence, etc. Managing these with rebar has been very effective for projects, where simply calling <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">rebar compile</span> puts everything your app needs in <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">./deps</span>. Projects that depend upon LFE are doing this, but we'll cover that in a future blog post.<br /><br /><br /><b>Using LFE</b><br /><br />With everything compiled, we can jump right in! Let's fire up the REPL, and do some arithmetic as a sanity check:<br /><script src="https://gist.github.com/5384522.js?file=lfe-repl-1.lfe.lisp"></script> <br />How about a message to <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">stdout</span>?<br /><script src="https://gist.github.com/5384522.js?file=lfe-repl-2.lfe.lisp"></script> <br />Any form starting with <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">:</span> is interpreted as a call to a module. The full form is <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">(: &lt;module name&gt; &lt;function name&gt; &lt;arguments&gt;)</span>. As such, you can see that we're calling the <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">format</span> function in the (built-in) <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">io</span> module.<br /><br />Also, it's good to know that there are certain things that you can't do in the REPL, e.g., defining modules, macros, functions, and records. Erlang expects that these sorts of activities take place in modules. However, we can explore a little more before we write our first module. Let's use the REPL's <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">set</span> form and <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">lambda</span> to define a function anyway (albeit, in a somewhat awkward fashion):<br /><script src="https://gist.github.com/5384522.js?file=lfe-repl-3.lfe.lisp"></script> <br />That wasn't too bad ;-) We're seeing the external module call, again -- this time to the math library. Now let's use a module of our own devising...<br /><br /><br /><b>Creating Modules</b><br /><br />In another terminal (but same working directory), let's create a module in a file called my-module.lfe, with the following content:<br /><script src="https://gist.github.com/5384608.js?file=lfe-module-1.lfe.lisp"></script> <br /><br />Note that the module name in the code needs to match the file name (minus the extension) that you used for the module.<br /><br />Back in the REPL terminal window, let's compile this module and run the defined function:<br /><script src="https://gist.github.com/5384608.js?file=lfe-module-2.lfe.lisp"></script> <br />Let's add another function to the module that demonstrates the benefits of Erlang's multiple-arity support:<br /><script src="https://gist.github.com/5384608.js?file=lfe-module-3.lfe.lisp"></script> <br />Re-compiling and running the functions, we are greeted with success:<br /><script src="https://gist.github.com/5384608.js?file=lfe-module-4.lfe.lisp"></script> <br />Lastly, let's convert the power function we defined in the previous section using our REPL-workaround to a "real" function, defined in our new module:<br /><script src="https://gist.github.com/5384608.js?file=lfe-module-5.lfe.lisp"></script> <br />And then let's try it out:<br /><script src="https://gist.github.com/5384608.js?file=lfe-module-6.lfe.lisp"></script> <br />Perfect.<br /><br />(Of course, it's rather absurd to redefine <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">pow</span> to <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">exp</span>, when there is basically nothing to gain by it ;-) It's just a quick demo...)<br /><br /><br /><b>Conclusion</b><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-fonndtAAXJI/UUAGF-K1LpI/AAAAAAAAADk/YZs-7OwO608/s1600/LispFlavoredErlang-medium.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"><img border="0" src="http://2.bp.blogspot.com/-fonndtAAXJI/UUAGF-K1LpI/AAAAAAAAADk/YZs-7OwO608/s200/LispFlavoredErlang-medium.png" height="200" width="168" /></a></div>There's lots more to learn; this has been just a small sip from a hot mug o' LFE.<br /><br />However, it's definitely enough to get you started and, should you be interested in following along in future LFE blog posts, you'll have everything you need to get the most out of those.<br /><br /><br />