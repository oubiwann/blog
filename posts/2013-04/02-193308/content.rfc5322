Subject: Maths and Programming: Whence Recursion?
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: category theory,computing,functions,programming,history,recursion,lisp,lambda calculus,research,math
Source: https://oubiwann.blogspot.com/2013/04/maths-and-programming-whence-recursion.html
Comments:
Content-Type: md
Public?: true

<div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-6VOclHLsn8U/UWMiLE5aa0I/AAAAAAAAAEY/SrJ6d2vVi9s/s1600/Lambda.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-6VOclHLsn8U/UWMiLE5aa0I/AAAAAAAAAEY/SrJ6d2vVi9s/s1600/Lambda.png" height="200" width="200" /></a></div>As a manager in the software engineering industry, one of the things that I see on a regular basis is a general lack of knowledge from less experienced developers (not always "younger"!) with regard to the foundations of computing and the several related fields of mathematics. There is often a great deal of focus on what the hottest new thing is, or how the industry can be changed, or how we can innovate on the decades of profound research that has been done. All noble goals.<br /><br />Notably, another trend I've recognized is that in a large group of devs, there are often a committed few who <i>really</i> know their field and its history. That is always so amazing to me and I have a great deal of admiration for the commitment and passion they have for their art. Let's have more of that :-)<br /><br />As for myself, these days I have many fewer hours a week which I can dedicate to programming compared to what I had 10 years ago. This is not surprising, given my career path. However, what it <i>has</i> meant is that I have to be much more focused when I do get those precious few hours a night (and sometimes just a few per week!). I've managed this in an ad hoc manner by taking quick notes about fields of study that pique my curiosity. Over time, these get filtered and a few pop to the top that I really want to give more time.<br /><br />One of the driving forces of this filtering process is my never-ending curiosity: "<i>Why</i> is it that way?" "How did this come to be?" "What is the <i>history</i> behind that convention?" I tend to keep these musings to myself, exploring them at my leisure, finding some answers, and then moving on to the next question (usually this takes several weeks!).<br /><br />However, given the observations of the recent years, I thought it might be constructive to ponder aloud, as it were. To explore in a more public forum, to set an example that the vulnerability of curiosity and "not knowing" is quite okay, that even those of us with lots of time in the industry are constantly learning, constantly asking.<br /><br />My latest curiosity has been around recursion: who first came up with it? How did it make it's way from abstract maths to programming languages? How did it enter the consciousness of so many software engineers (especially those who are at ease in functional programming)? It turns out that an answer to this is actually quite closely related to a previous post I wrote on <a href="http://technicae.cogitat.io/2012/12/the-secret-history-of-lambda.html">the secret history of lambda</a>. A short version goes something like this:<br /><br /><a href="http://en.wikipedia.org/wiki/Giuseppe_Peano">Giuseppe Peano</a> wanted to establish a firm foundation for logic and maths in general. As part of this, he ended up creating <a href="http://en.wikipedia.org/wiki/Peano_axioms">consistent axioms</a> around the hard-to-define natural numbers, counting, and arithmetic operations (which utilized recursion).&nbsp; While visiting a conference in Europe, <a href="http://en.wikipedia.org/wiki/Bertrand_russell">Bertrand Russell</a> was deeply impressed by the dialectic talent of Peano and his unfailing clarity; he queried Peano as to his secret for success (Peano told him) and them asked for all of his published works. Russell proceeded to study these quite deeply. With this in his background, he eventually co-wrote the <a href="http://en.wikipedia.org/wiki/Principia_mathematica">Principia Mathematica</a>.&nbsp;Later,&nbsp;<a href="http://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</a> (along with his grad students) sought to improve upon this, and in the process Alonzo Church ended up developing the <a href="http://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</a>. His student, <a href="http://en.wikipedia.org/wiki/John_McCarthy_%28computer_scientist%29">John McCarthy</a>, later created the first functional programming language, <a href="http://en.wikipedia.org/wiki/Lisp_%28programming_language%29">Lisp</a>, utilizing concepts from the lambda calculus (recursion and function composition).<br /><br />In the course of reading between 40-50 mathematics papers (including various histories) over the last week, I have learned far more than I had originally intended. So much so, in fact, that I'm currently working on a very fun recursion tutorial that not only covers the usual practical stuff, but steps the reader through programming implementations of the Peano axioms, arithmetic definitions, the Ackermann function, and parts of the lambda calculus.<br /><br />I've got a few more blog post ideas cooking that dive into functions, their history and evolution. We'll see how those pan out. Even more exciting, though, was having found interesting papers discussing the evolution of functions and the birth of <a href="http://en.wikipedia.org/wiki/Category_theory">category theory</a> from algebraic topology. This, needless to say, spawned a whole new trail of research, papers, and books... and I've got some great ideas for future blog posts/tutorials around this topic as well. (I've encountered category theory before, but watching it appear unsearched and unbidden in the midst of the other reading was quite delightful).<br /><br />In closing, I enjoy reading not only the original papers (and correspondence between great thinkers of a previous era), but also the meanderings and rediscoveries of my peers. I've run across blog posts like this in the past, and they were quite enchanting. I hope that we continue to foster that in our industry, and that we see more examples of it in the future.<br /><br />Keep on questing ;-)<br /><br /><br />