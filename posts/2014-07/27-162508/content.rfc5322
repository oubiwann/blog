Subject: The Future of Programming - Themes at OSCON 2014
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: conferences,distributed systems,overviews,programming,oscon,future,open-source,ponderings,programming-future
Source: https://oubiwann.blogspot.com/2014/07/the-future-of-programming-oscon-themes.html
Comments:
Content-Type: md
Public?: true

<div class="separator" style="clear: both; text-align: center;"><a
href="http://www.oscon.com/oscon2014" imageanchor="1" style="clear: right;
float: right; margin-bottom: 1em; margin-left: 1em;"><img border="0"
src="http://1.bp.blogspot.com/-wxssMfNe4sg/U9U_8LUQi9I/AAAAAAAAAQg/ZYijt6YYnVA
/s1600/Screen+Shot+2014-07-27+at+9.44.55am.png" height="196" width="320"
/></a></div><div><i>Series Links</i></div><ul><li><a
href="http://technicae.cogitat.io/2014/07/the-future-of-programming-overview.h
tml">An Overview</a></li><li><a
href="http://technicae.cogitat.io/2014/07/the-future-of-programming-oscon-them
es.html">Themes at OSCON 2014</a></li><li><a
href="http://technicae.cogitat.io/2014/07/the-future-of-programming-adopting.h
tml">Adopting the Functional Paradigm?</a></li><li>Retrospective on
Paradigms</li><li>The Rise of Polyglotism</li><li>Preparing for the
Future</li></ul><br /><br /><b>A Qualitative OSCON Debrief</b><br /><b><br
/></b>As you might have noticed from the <a
href="http://www.oscon.com/oscon2014">OSCON</a> Twitter-storm this year, the
conference was a blast. Even if you weren't physically present, given the <a
href="http://www.oscon.com/oscon2014/public/schedule/grid/public">17 tracks</a
>, you can imagine that the presentations -- and subsequent conversations --
were deeply varied.<br /><br />This was the second OSCON I'd attended; the
first was was in 2008 as a guest of <a
href="https://www.linkedin.com/profile/view?id=3763">Michael Bernstein</a>, a
friend who was speaking there. <a href="http://www.oscon.com/oscon2008">OSCON
2008</a> was a zoo - I'm not sure of the actual body count, but I've heard
that attendees + vendors + miscellaneous topped 12,000 people over the course
of the week (I would love to hear if someone has hard data on that -- googling
didn't reveal much). OSCON 2008 was dominated by Big Data, Hadoop, endless
buzzword bingo, and business posturing by all sorts. The most interesting bits
of that conference were the outlines that formed around the conversations
people <i>weren't</i> having. In fact, over the following 6 months, that's
what I spent my spare time pondering: what people <i>didn't</i> say at
OSCON.<br /><br />This year's conference seemed like a completely different
animal. It felt like easily 1/2 to 1/3rd the number of attendees in 2008.
Where that one had all the anonymizing feel of rush-hour in a major
metropolitan hub, OSCON 2014 had a distinctly small-town vibe to it -- I was
completely charmed. Conversations (overheard as well as participated in) were
not littered with examples from the latest bizspeak, but rather focused on
essence. The interactions were not continually distracted, but rather steadily
focused, allowing people to form, express, and dispute complete thoughts with
their peers.<br /><br /><br /><b>Conversations</b><br /><br />So what
<i>were</i> people talking about this year? Here are some of the topics I
heard covered during lunches, in hallways, and at podiums; at pubs, in
restaurants and at parks <a
href="http://technicae.cogitat.io//2014/07/the-future-of-programming-oscon-the
mes.html#footnote-1">[1]</a>:<br /><ul><li>What communities are
thriving?</li><li>Which [projects, organisations, companies, etc.] are
treating their people right?</li><li>What successful processes are being
followed at [project, organisation, etc.]?</li><li>Who is hiring and why
should someone want to work there?</li><li>Where can I go to learn X? Who is
teaching X? Who shares the most about X?</li><li>Which [projects,
organisations] support X?</li><li>Why don't more&nbsp;[people, projects,
organisations]&nbsp;care about [possible future X]?</li><li>Why don't
more&nbsp;[people, projects, organisations]&nbsp;spend more time investigating
the history of X for "lessons learned"?</li><li>There was so much more X in
computing during the 60s and 70s -- what happened? <a
href="http://technicae.cogitat.io//2014/07/the-future-of-programming-oscon-the
mes.html#footnote-2">[2]</a></li><li>Why are we reinventing X?</li><li>When is
X going to be invented, and who's going to do it?</li><li>Everything is
changing! I can't keep up anymore.</li><li>I want to keep up, but
how?</li><li>Why can't we stop making so many X?</li><li>Nobody cares about Y
anymore; we're all doing X now.</li><li>Full stack
developers!</li><li>Haskell!</li><li>Fault-tolerant systems!</li></ul><br
/>After lots of reflection, here's how I classified most of the conversations
I heard:<br /><div><ul><li>Developing communities,</li><li>Developing careers
and/or personal/professional qualities, and</li><li>Developing
software,&nbsp;</li></ul><div><br />along lines such
as:</div><ul><li>Effective maintenance, maturity, and health,</li><li>Focusing
on the "art", &nbsp;eventual mastery, and investments of
time,</li><li>Tempering bare pragmatism with something resembling science or
academic excellence,</li><li>Learning the new to bolster the
old,</li><li>Inspiring innovation from a place of contemplation and
analysis,</li><li>Mining the past for great ideas, and</li><li>Figuring out
how to better share and spread the adoption of good ideas.</li></ul><div><br
/><b><br /></b><b>Themes</b><br /><b><br /></b>Generalized to such a degree,
this could have been pretty much <i>any</i> congregation of interested,
engaged minds since the dawn of civilization. So what does it look like if we
don't normalize&nbsp;<i>quite</i> so much? Weighing these with what may well
be my own bias (and the bias of like-minded peers), I submit to your review
these themes:<br /><br /><ul><li>A very strong interest in programming
(thinking and creating) vs. integration (assessing and consuming).</li><li>An
express desire to become better at abstraction (higher-order functions,
composition, and types) to better deal with growing systems
complexities.</li><li>An interest in building even <i>more</i> complicated
systems.</li><li>A fear of reimplementing past mistakes or of letting dust
gather on past intellectual achievements.</li></ul><br />As you might have
guessed, these number very highly among the reasons why the conference was
such an unexpected pleasure for me. But it should also not come as a surprise
that these themes are present:<br /><br /><ul><li>We have had several years of
companies such as Google and Amazon (AWS) building and deploying some of the
most sophisticated examples of logic-made-manifest in human history. This has
created perceived value in our industry and many wish to emulate it.
Similarly, we have single purpose distributed systems <a
href="http://www.reuters.com/article/2014/02/20/us-whatsapp-facebook-research-
idUSBREA1J14A20140220">being purchased for nearly 20 billion USD</a> -- a
different kind of complexity, with a different kind of perceived
reward.</li><li>In the 70s and 80s, OOP adoption brought with it the ability
to create large software systems in ways that people had not dared dream or
were impractical to realize. Today's growing adoption of the Functional
paradigm is giving early signs of allowing us to better integrate complex
systems with more predictability and fewer errors.</li><li>Case studies of
improvements in productivity or the capacity to handle highly complex or
previously intractable problems with better abstractions, has ignited the
passions of many. Not wanting to limit their scope of knowledge or sources of
inspiration, people are not simply limiting themselves to the exploration of
such things as <a href="http://en.wikipedia.org/wiki/Category_theory">Category
Theory</a> -- they are opening the vaults of computer science with such
projects as <a href="http://papers-we-love.github.io/">Papers We
Love</a>.</li></ul><br />There's a brave new world in the making. It's a world
for programmers and thinkers, for philosophers and makers. There's a lot to
learn, but it's really not so different from older worlds: the same passions
drive us, the same idealism burns brightly. And it's nice to see that these
themes arise not only in small, highly specialized venues such as university
doctoral programs and <a href="https://thestrangeloop.com/">StrangeLoop</a>
(or <a href="http://www.lambdajam.com/">LambdaJam</a>), but also in larger
intersections of the industry like <a href="http://www.oscon.com/">OSCON</a>
(or more general-audience ones like Meetups).<br /><br /><i>Up next</i>: <a
href="http://technicae.cogitat.io/2014/07/the-future-of-programming-adopting.h
tml">Adopting the Functional Paradigm?</a><br /><i>Previously</i>:&nbsp;<a
href="http://technicae.cogitat.io/2014/07/the-future-of-programming-overview.h
tml">An Overview</a><br /><br /><br /><b>Footnotes</b><br /><br /><a
href="https://www.blogger.com/null" name="footnote-1"></a>[1] It goes without
saying that any one attendee couldn't possibly be exposed to enough
conversations to form a perfectly accurate sense of the total distribution of
conversation topics. No claim to the contrary is being made here :-)<br /><br
/></div></div><div><a href="https://www.blogger.com/null"
name="footnote-2"></a>[2] I strongly adhere to the multifaceted hypothesis
proposed by Bret Victor </div><a
href="http://worrydream.com/dbx/">here</a>&nbsp;in the section titled "Why did
all these ideas happen during this particular time period?" <br /><div><br
/></div><div><br /></div>