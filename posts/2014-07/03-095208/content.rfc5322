Subject: Uncovering Inherent Structures in Organizations
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: analysis,erlang,lfe,clojure,management,modeling,leadership,elixir,math,organization,ruby,process,distance,lisp,levenshtein,hy
Source: https://oubiwann.blogspot.com/2014/07/uncovering-inherent-org-structures.html
Comments:
Content-Type: md
Public?: true

<table cellpadding="0" cellspacing="0" class="tr-caption-container"
style="float: right; margin-left: 1em; text-align: right;"><tbody><tr><td
style="text-align: center;"><a
href="http://2.bp.blogspot.com/-Vdrh8o_vce0/U7JGiCyeXqI/AAAAAAAAAOU/dfspLdOng4
w/s1600/VladimirLevenshtein-large.jpg" imageanchor="1" style="clear: right;
margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0"
src="http://2.bp.blogspot.com/-Vdrh8o_vce0/U7JGiCyeXqI/AAAAAAAAAOU/dfspLdOng4w
/s1600/VladimirLevenshtein-large.jpg" height="320" width="211"
/></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><a
href="http://en.wikipedia.org/wiki/Vladimir_Levenshtein">Vladimir Levenshtein<
/a></td></tr></tbody></table>This post should have a subtitle: "Using Team
Analysis and Levenshtein Distance to Reveal said Structure." It's the first
part of that subtitle that is the secret, though: being able to correctly
analyze and classify individual teams. Without that, using something clever
like Levenshtein distance isn't going to be very much help.<br /><br />But
that's coming in towards the end of the story. Let's start at the
beginning.<br /><br /><h2>What You're Going to See</h2>This post is a bit
long. Here are the sections I've divided it into:<br /><br /><ul><li>What
You're Going to See</li><li>Premise</li><li>Introducing
ACME</li><li>Categorizing Teams</li><li>Category Example</li><li>Calculating
the&nbsp;Levenshtein Distance of Teams</li><li>Sorting and
Interpretation</li><li>Conclusion</li></ul><br />However, you don't need to
read the whole thing to obtain the main benefits. You can get the Cliff Notes
version by reading the Premise, Categorizing Teams, Interpretation, and the
Conclusion.<br /><br /><h2><b>Premise</b></h2>Companies grow. Teams expand. If
you're well-placed in your industry and providing in-demand services or
products, this is happening to you. Individuals and small teams tend to deal
with this sort of change pretty well. At an organizational level, however,
this sort of change tends to have an impact that can bring a group down, or
rocket it up to the next level.<br /><br />Of the many issues faced by growing
companies (or rapidly growing orgs within large companies), the structuring
one can be most problematic: "Our old structures, though comfortable, won't
scale well with all these new teams and all the new hires joining our existing
teams. How do we reorganize? Where do we put folks? Are there natural lines
along which we can provide better management (and vision!) structure?"<br
/><br />The answer, of course, is "yes" -- but! It requires careful analysis
and a deep understanding every team in your org.<br /><br />The remainder of
this post will set up a scenario and then figure out how to do a re-org. I use
a software engineering org as an example, but that's just because I have a
long and intimate knowledge of them and understand the ways in which one can
classify such teams. These same methods could be applied a Sales group,
Marketing groups, etc., as long as you know the characteristics that define
the teams of which these orgs are comprised.<br /><b><br /></b><b><br
/></b><br /><div class="separator" style="clear: both; text-align: center;"><a
href="http://fringefocus.com/i/acme-inventory-series/" imageanchor="1"
style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img
border="0" src="http://4.bp.blogspot.com/-0p1cLJpjbts/U7SYBVBUdHI/AAAAAAAAAO0/
Of5ln8LuJMo/s1600/ACMEInventorySeries_Anvil_FringeFocus_Large.png" height="200
" width="200" /></a></div><h2><b>Introducing ACME</b></h2><a
href="http://en.wikipedia.org/wiki/Acme_Corporation">ACME Corporation</a> is
the <a
href="http://laughingsquid.com/the-acme-catalog-retro-product-catalog-for-loon
ey-tunes-fans/">leading producer</a> of some of the most <a
href="http://home.roadrunner.com/~tuco/looney/acme/acme.html">innovative produ
cts</a> of the 20th century. The CTO had previously tasked you, the VP of
Software Development to bring this product line into the digital age -- and
you did! Your great ideas for the updated suite are the new hottness that
everyone is clamouring for. Subsequently, the growth of your teams has been
fast, and dare we say, exponential.<br /><br />More details on the scenario:
your Software Development Group has several teams of engineers, all working on
different products or services, each of which supports ACME Corporation in
different ways. In the past 2 years, you've built up your org by an order of
magnitude in size. You've started promoting and hiring more managers and
directors to help organize these teams into sensible encapsulating structures.
These larger groups, once identified, would comprise the whole Development
Group.<br /><br />Ideally, the new groups would represent some aspect of the
company, software development, engineering, and product vision -- in other
words, some sensible clustering of teams doing related work. How would you
group the teams in the most natural way?<br /><br />Simply dividing along
language or platform lines may seem like the obvious answer, but is it the
best choice? There are some questions that can help guide you in figuring this
out:<br /><ul><li>How do these teams interact with other parts of the
company?&nbsp;</li><li>Who are the stakeholders in feature
development?&nbsp;</li><li>Which sorts of customers does each team primarily
serve?</li></ul><div>There are many more questions you could ask (some are
implicit in the analysis data linked below), but this should give a taste.<br
/><br />ACME&nbsp;Software Development&nbsp;has grown the following teams,
some of which focus on products, some on infrastructure, some
on&nbsp;services, etc.:</div><ul><li>Digital Anvil Product Team</li><li>Giant
Rubber Band App Team</li><li>Digital Iron Carrot Team</li><li>Jet Propelled
Unicycle Service Team</li><li>Jet Propelled Pogo Stick Service
Team</li><li>Ultimatum Dispatcher API Team</li><li>Virtual Rocket Powered
Roller Skates Team</li><li>Operations (release management, deployments,
production maintenance)</li><li>QA (testing infrastructure,
CI/CD)</li><li>Community Team (documentation, examples, community engagement,
meetups, etc.)</li></ul><div><b><br /></b></div><div><table cellpadding="0"
cellspacing="0" class="tr-caption-container" style="float: right; margin-left:
1em; text-align: right;"><tbody><tr><td style="text-align: center;"><a
href="http://3.bp.blogspot.com/-JQJQXKWATAo/U7R17DhFLnI/AAAAAAAAAOk/Tj0RNRF-RW
o/s1600/ENIAC-SWDEV-Teams.jpg" imageanchor="1" style="clear: left;
margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0"
src="http://3.bp.blogspot.com/-JQJQXKWATAo/U7R17DhFLnI/AAAAAAAAAOk/Tj0RNRF-RWo
/s1600/ENIAC-SWDEV-Teams.jpg" height="133" width="200" /></a></td></tr><tr><td
class="tr-caption" style="text-align: center;">Early SW Dev team hacking the
ENIAC</td></tr></tbody></table><h2><b>Categorizing Teams</b></h2></div><div>Ea
ch of those teams started with 2-4 devs hacking on small skunkworks projects.
They've now blossomed to the extent that each team has significant sub-teams
working on new features and prototyping for the product they support. These
large teams now need to be characterized using a method that will allow them
to be easily compared. We need the ability to see how closely related one team
is to another, across many different variables. (In the scheme outlined below,
we end up examining 50 bits of information for each team.)<br /><br />Keep in
mind that each category should be chosen such that it would make sense for
teams categorized similarly to be grouped together. A counter example might be
"Team Size"; you don't necessarily want all large teams together in one group,
and all small teams in a different group. As such, "Team Size" is probably a
poor category choice.</div><div><br /></div><div>Here are the categories which
we will use for the ACME Software Development
Group:</div><div><ul><li>Language</li><li>Syntax</li><li>Platform</li><li>Impl
ementation Focus</li><li>Supported OS</li><li>Deployment
Type</li><li>Product?</li><li>Service?</li><li>License Type</li><li>Industry
Segment</li><li>Stakeholders</li><li>Customer Type</li><li>Corporate
Priority</li></ul></div><div>Each category may be either single-valued or
multi-valued. For instance, the categories ending in question marks will be
booleans. In contrast, multiple languages might be used by the same team, so
the "Language" category will sometimes have several entries.<br /><br
/><h2>Category Example</h2>(Things are going to get a bit more technical at
this point; for those who care more about the outcomes than the methods used,
feel free to skip to the section at the end: <b>Sorting and
Interpretation</b>.)<br /><br />In all cases, we will encode these values as
binary digits -- this allows us to very easily compare teams using&nbsp;<a
href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance<
/a>, since the total of all characteristics we are filtering on can be
represented as a string value. An example should illustrate this well.<br
/><br />(The <i>Levenshtein distance</i> between two words is the minimum
number of single-character edits -- such as insertions, deletions or
substitutions -- required to change one word into the other. It is named after
<a href="http://en.wikipedia.org/wiki/Vladimir_Levenshtein">Vladimir
Levenshtein</a>, who defined this "distance" in 1965 when exploring the
possibility of correcting deletions, insertions, and reversals in binary
codes.)</div><div><br /></div><div>Let's say the Software Development Group
supports the following languages, with each one assigned a binary
value:</div><div><ul><li>LFE - <span style="font-family: Courier New, Courier,
monospace; font-size: x-small;">#b0000000001</span></li><li>Erlang&nbsp;-<span
style="font-family: Courier New, Courier, monospace; font-size:
x-small;">&nbsp;#b0000000010</span></li><li>Elixir&nbsp;-&nbsp;<span style="fo
nt-family: Courier New, Courier, monospace; font-size:
x-small;">#b0000000100</span></li><li>Ruby&nbsp;-&nbsp;<span style="font-famil
y: Courier New, Courier, monospace; font-size:
x-small;">#b0000001000</span></li><li>Python&nbsp;-&nbsp;<span style="font-fam
ily: Courier New, Courier, monospace; font-size:
x-small;">#b0000010000</span></li><li>Hy&nbsp;-&nbsp;<span style="font-family:
Courier New, Courier, monospace; font-size:
x-small;">#b0000100000</span></li><li>Clojure&nbsp;-&nbsp;<span style="font-fa
mily: Courier New, Courier, monospace; font-size:
x-small;">#b0001000000</span></li><li>Java&nbsp;-&nbsp;<span style="font-famil
y: Courier New, Courier, monospace; font-size:
x-small;">#b0010000000</span></li><li>JavaScript -&nbsp;<span
style="font-family: Courier New, Courier, monospace; font-size:
x-small;">#b0100000000</span></li><li>CoffeeScript -&nbsp;<span
style="font-family: Courier New, Courier, monospace; font-size:
x-small;">#b1000000000</span></li></ul><div>A team that used <a
href="http://lfe.io/">LFE</a>, <a href="http://hylang.org/">Hy</a>, and <a
href="http://clojure.org/">Clojure</a> would obtain its "Language" category
value by XOR'ing the three supported languages, and would thus be <span
style="font-family: Courier New, Courier, monospace; font-size:
x-small;">#b0001100001</span>. In LFE, that could be done by entering the
following code the REPL:<br /><br /><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=01-values.lfe"></scr
ipt><br />We could then compare this to a team that used just Hy and Clojure
(<span style="font-family: Courier New, Courier, monospace; font-size:
x-small;">#b0001100000</span>), which has a&nbsp;<a
href="http://rosettacode.org/wiki/Levenshtein_distance#Cached_Implementation">
Levenshtein distance</a> of 1 with the previous language category value. A
team that used <a href="https://www.ruby-lang.org/en/">Ruby</a> and <a
href="http://elixir-lang.org/">Elixir</a> (<span style="font-family: Courier
New, Courier, monospace; font-size: x-small;">#b0000001100</span>) would have
a Levenshtein distance of 5 with the LFE/Hy/Clojure team (which makes sense: a
total of 5 languages between the two teams with no languages shared in
common).&nbsp;</div></div><div><br /></div><div><br /></div><div><a
href="http://2.bp.blogspot.com/-fonndtAAXJI/UUAGF-K1LpI/AAAAAAAAADk/YZs-7OwO60
8/s1600/LispFlavoredErlang-medium.png" imageanchor="1" style="clear: left;
display: inline !important; float: left; margin-bottom: 1em; margin-right:
1em; text-align: center;"><img border="0"
src="http://2.bp.blogspot.com/-fonndtAAXJI/UUAGF-K1LpI/AAAAAAAAADk/YZs-7OwO608
/s1600/LispFlavoredErlang-medium.png" height="200" width="168"
/></a></div><div><h2><b>Calculating the Levenshtein Distance of
Teams</b></h2></div><div>As a VP who is keen on deeply understanding your
teams, you have put together a&nbsp;<a
href="https://docs.google.com/spreadsheets/d/1u42J3Yh9N1vgml42uWxRph-ClPrXBbKG
BTWQCHDQ0kQ/view?pli=1#gid=0">spreadsheet</a>&nbsp;with a break-down of not
only languages used in each team, but lots of other categories, too. For easy
reference,&nbsp;you've put a "legend" for the individual category binary
values is at the bottom of the linked spreadsheet.<br /><br />In the third
table on that sheet, all of the values for each column are combined into a
single binary string. This (or a slight modification of this) is what will be
the input to your calculations. Needless to say, as a complete fan of LFE, you
will be writing some Lisp code :-)<br /><br /><table align="center"
cellpadding="0" cellspacing="0" class="tr-caption-container"
style="margin-left: auto; margin-right: auto; text-align:
center;"><tbody><tr><td style="text-align: center;"><a
href="http://2.bp.blogspot.com/-mpQqLfY4u10/U7c3hS5ApTI/AAAAAAAAAPc/awIb7YjHkM
U/s1600/Screenshot+2014-07-04+16.22.33.png" imageanchor="1"
style="margin-left: auto; margin-right: auto;"><img border="0"
src="http://2.bp.blogspot.com/-mpQqLfY4u10/U7c3hS5ApTI/AAAAAAAAAPc/awIb7YjHkMU
/s1600/Screenshot+2014-07-04+16.22.33.png" height="231" width="400"
/></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Partial
view of the spreadsheet's first page.</td></tr></tbody></table>(If you would
like to try the code out yourself while reading, and you have <a
href="https://github.com/lfe/lfetool/">lfetool</a> installed, simply create a
new project and start up the REPL: <span style="font-family: Courier New,
Courier, monospace; font-size: x-small;"><b>$ lfetool new library ld; cd ld
&amp;&amp; make-shell</b></span></div><div>That will download and compile the
dependencies for you. In particular, you will then have access to the
lfe-utils project -- which contains the Levenshtein distance functions we'll
be using. You should be able to copy-and-paste functions, vars, etc., into the
REPL from the Github gists.)</div><div><br />Let's create a couple of data
structures that will allow us to more easily work with the data you collected
about your teams in the spreadsheet:<br /><br /><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=02-setup-data.lfe"><
/script><br />We can use a quick copy and paste into the LFE REPL for two of
those numbers to do a sanity check on the distance between the Community Team
and the Digital Iron Carrot Team:<br /><br /><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=03-ld.lfe"></script>
<br />That result doesn't seem unreasonable, given that at a quick glance we
can see both of these strings have many differences in their respective
character positions.<br /><br />It looks like we're on solid ground, then, so
let's define some utility functions to more easily work with our data
structures:<br /><br /><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=04-setup-funs.lfe"><
/script><br />Now we're ready to roll; let's try sorting the data based on a
comparison with a one of the teams:<br /><br /><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=05-ld-sort-1.lfe"></
script><br />It may not be obvious at first glance, but what the <span
style="font-family: Courier New, Courier, monospace; font-size:
x-small;">levenshtein-sort</span> function did for us is compare our "control"
string to every other string in our data set, providing both the distance and
the string that the control was compared to. The first entry in the results is
the our control string, and we see what we would expect: the Levenshtein
distance with itself is 0 :-)<br /><br />The result above is not very easily
read by most humans ... so let's define a custom sorter that will take
human-readable text and then output the same, after doing a sort on the binary
strings:<br /><br /><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=06-ld-sort-fun.lfe">
</script><br />(If any of that doesn't make sense, please stop in and say
"hello" on the <a
href="https://groups.google.com/forum/#!forum/lisp-flavoured-erlang">LFE mail
list</a> -- ask us your questions! We're a friendly group that loves to chat
about LFE and how to translate from Erlang, Common Lisp, or Clojure to LFE :-)
)</div><div><div class="separator" style="clear: both; text-align: center;"><a
href="http://fringefocus.com/i/the-acme-corporation-luxury-copper-variant/#" i
mageanchor="1" style="clear: right; float: right; margin-bottom: 1em;
margin-left: 1em;"><br /></a><a
href="http://fringefocus.com/i/the-acme-corporation-luxury-copper-variant/#" i
mageanchor="1" style="clear: right; float: right; margin-bottom: 1em;
margin-left: 1em;"><img border="0"
src="http://3.bp.blogspot.com/-UQuc4cTAmRY/U7SZPOvkDWI/AAAAAAAAAPA/h7FkIzJHKWw
/s1600/ACME_copper_variant-580x869.jpg" height="200" width="133"
/></a></div><b><br /></b><br /><h2><b>Sorting and
Interpretation</b></h2></div><div>Before we try out our new function, we
should ponder which team will be compared to all the others -- the sort
results will change based on this choice. Looking at the spreadsheet, we see
that the "Digital Iron Carrot Team" (DICT) has some interesting properties
that make it a compelling choice:<br /><ul><li>it has stakeholders in Sales,
Engineering, and Senior Leadership;</li><li>it has a "Corporate Priority" of
"Business critical"; and</li><li>it has both internal and external
customers.</li></ul><div>Of all the products and services, it seems to be the
biggest star. Let's try a sort now, using our new custom function -- inputting
something that's human-readable:&nbsp;</div><br /></div><div><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=07-ld-sort-2.lfe"></
script><br />Here we're making the request "Show me the sorted results of each
team's binary string compared to the binary string of the DICT." Here are the
human-readable results:<br /><br /><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=08-ld-sort-2-results
.lfe"></script><br />For a better visual on this, take a look at the <a
href="https://docs.google.com/spreadsheets/d/1u42J3Yh9N1vgml42uWxRph-ClPrXBbKG
BTWQCHDQ0kQ/view?pli=1#gid=1937832327">second tab</a> of the shared
spreadsheet. The results have been applied to the collected data there, and
then colored by major groupings. The first group shares these things in
common:<br /><ul><li>Lisp- and Python-heavy</li><li>Middleware running on BSD
boxen</li><li>Mostly proprietary</li><li>Externally facing</li><li>Focus on
apps and APIs</li></ul><div>It would make sense to group these three
together.<br /><br /></div><div><table align="center" cellpadding="0"
cellspacing="0" class="tr-caption-container" style="margin-left: auto;
margin-right: auto; text-align: center;"><tbody><tr><td style="text-align:
center;"><a href="http://4.bp.blogspot.com/-p4yUq_VA7rw/U7c3gnG9SvI/AAAAAAAAAP
g/JvNgHKFSSzE/s1600/Screenshot+2014-07-04+16.21.20.png" imageanchor="1"
style="margin-left: auto; margin-right: auto;"><img border="0"
src="http://4.bp.blogspot.com/-p4yUq_VA7rw/U7c3gnG9SvI/AAAAAAAAAPg/JvNgHKFSSzE
/s1600/Screenshot+2014-07-04+16.21.20.png" height="77" width="400"
/></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A sort
(and thus grouping) by comparison to critical
team.</td></tr></tbody></table></div><div>Next on the list is Operations and
QA -- often a natural pairing, and this process bears out such conventional
wisdom. These two are good candidates for a second group.</div><div><br
/></div><div>Things get a little trickier at the end of the list. Depending
upon the number of developers in the Java-heavy Giant Rubber Band App Team,
they might make up their own group. However, both that one and the next team
on the list have frontend components written in Angular.js. They both are used
internally and have Engineering as a stakeholder in common, so let's go ahead
and group them.</div><div><br /></div><div>The next two are cloud-deployed
Finance APIs running on the Erlang VM. These make a very natural
pairing.</div><div><br /></div><div>Which leaves us with the oddball: the
Community Team. The Levenshtein distance for this team is the greatest for all
the teams ... but don't be mislead. Because it has something in common with
<i>all teams</i> (the Community Team supports every product with docs, example
code, Sales and TAM support, evangelism for open source projects, etc.), it
will have many differing bits with <i>each team</i>. This really should be in
a group all its own so that structure represents reality: all teams depend
upon the Community Team. A good case could also probably be made for having
the manager of this team report directly up to you.&nbsp;</div><div><br
/></div><div>The other groups should probably have directors that the team
managers report to (keeping in mind that the teams have grown to anywhere from
20 to 40 per team). The director will be able to guide these teams according
to your vision for the Software Group and the shared traits/common vision you
have uncovered in the course of this analysis.</div><div><br
/></div><div>Let's go back to the Community Team. Perhaps in working with
them, you have uncovered a hidden fact: the community interactions your devs
have are seriously driving market adoption through some impressive and
passionate service and open source docs+evangelism. You are curious how your
teams might be grouped if sorted from the perspective of the Community
Team.</div><div><br /></div><div>Let's find out!</div><br /><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=09-ld-sort-3.lfe"></
script><br />As one might expect, most of the teams remain grouped in the same
way ... the notable exception being the split-up of the Anvil and Rubber Band
teams. Mostly no surprises, though -- the same groupings persist in this
model.<br /><br /><table align="center" cellpadding="0" cellspacing="0"
class="tr-caption-container" style="margin-left: auto; margin-right: auto;
text-align: center;"><tbody><tr><td style="text-align: center;"><a
href="http://1.bp.blogspot.com/-sFjVvAI1vbk/U7c3gifBz5I/AAAAAAAAAPk/CoaxgIO7Gw
I/s1600/Screenshot+2014-07-04+16.21.36.png" imageanchor="1"
style="margin-left: auto; margin-right: auto;"><img border="0"
src="http://1.bp.blogspot.com/-sFjVvAI1vbk/U7c3gifBz5I/AAAAAAAAAPk/CoaxgIO7GwI
/s1600/Screenshot+2014-07-04+16.21.36.png" height="83" width="400"
/></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A sort
(and thus grouping) by comparison to highly-connected
team.</td></tr></tbody></table>To be fair, if this is something you'd want to
fully explore, you should bump the "Corporate Priority" for the Community Team
much higher, recalculate it's overall bits, regenerate your data structures,
and then resort. It may not change too much in this case, but you'd be
applying consistent methods, and that's definitely the right thing to do :-)
You might even see the Anvil and Rubber Band teams get back together (left as
an exercise for the reader).<br /><br />As a last example, let's throw caution
and good sense to the wind and get crazy. You know, like the many times you've
seen bizarre, anti-intuitive re-orgs done: let's do a sort that compares a
team of middling importance and a relatively low corporate impact with the
rest of the teams. What do we see then?<br /><br /><script
src="https://gist.github.com/30d9d547e8b69684599f.js?file=10-ld-sort-4.lfe"></
script><br />This ruins everything. Well, almost everything: the only group
that doesn't get split up is the middleware product line (Jet Propelled and
Iron Carrot). Everything else suffers from a bad re-org.<br /><br /><table
align="center" cellpadding="0" cellspacing="0" class="tr-caption-container"
style="margin-left: auto; margin-right: auto; text-align:
center;"><tbody><tr><td style="text-align: center;"><a
href="http://2.bp.blogspot.com/-ds86vQoM-1U/U7c3gkPA9RI/AAAAAAAAAPo/QTxQrYeXQz
c/s1600/Screenshot+2014-07-04+16.22.03.png" imageanchor="1"
style="margin-left: auto; margin-right: auto;"><img border="0"
src="http://2.bp.blogspot.com/-ds86vQoM-1U/U7c3gkPA9RI/AAAAAAAAAPo/QTxQrYeXQzc
/s1600/Screenshot+2014-07-04+16.22.03.png" height="77" width="400"
/></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A sort
(and thus grouping) by comparison to a non-critical
team.</td></tr></tbody></table><br />If you were to do this because a genuine
change in priority had occurred, where the&nbsp;Giant Rubber Band App Team was
now the corporate leader/darling, then you'd need to recompute the bit values
and do re-sorts. Failing that, you'd just be falling into a trap that has
beguiled many before you.<br /><br /><br /><h2>Conclusion</h2>If there's one
thing that this exercise should show you, it's this: applying tools and
analyses from one field to fresh data in another -- completely unrelated --
field can provide pretty amazing results that turn mystery and guesswork into
science and planning.<br /><br />If we can get two things from this, the other
might be: knowing the parts of the system may not necessarily reveal the whole
(c.f. <a href="http://en.wikipedia.org/wiki/Complex_systems">Complex
Systems</a>), but it may provide you with the data that lets you better
predict emergent behaviours and identify patterns and structure where you
didn't see them (or even think to look!) before.</div><div><br /><br /></div>