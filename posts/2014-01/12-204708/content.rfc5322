Subject: Prefix Operators in Haskell
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: texas,clojure,haskell,scheme,ocaml,functional-programming,ddtx,programming,languages,m-expressions,lisp,s-expressions,books,fp,syntax
Source: https://oubiwann.blogspot.com/2014/01/prefix-operators-in-haskell.html
Comments:
Content-Type: md
Public?: true

<div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-sSNYosPbk3o/UtM3TBCX4lI/AAAAAAAAAHs/T1Z3qd4vft0/s1600/Haskell-Variation+(logo+only)-medium.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="143" src="http://3.bp.blogspot.com/-sSNYosPbk3o/UtM3TBCX4lI/AAAAAAAAAHs/T1Z3qd4vft0/s200/Haskell-Variation+(logo+only)-medium.png" width="200" /></a></div>I wanted to name this post something a little more catchy, like "McCarthy's Dream: Haskell as Lisp's M-Expressions" but I couldn't quite bring myself to do it. If s-expressions had greater support in Haskell, I would totally have gone for it, but alas, they don't.<br /><br />However, there is still reason to celebrate: many Haskell operators do support <i>prefix</i> notation! This was a mind-blower to me, since I hadn't&nbsp; heard about this until last night... <br /><br />At the <a href="http://datadaytexas.com/">Data Day Texas</a> conference this past Saturday, <a href="http://www.oreilly.com/">O'Reilly</a>/<a href="http://strataconf.com/">StrataConf</a> had a fantastic booth. Among the many cool give-aways they were doing, I obtained a coupon for a free ebook and another for 50% off. Upon returning home and having made my <a href="http://shop.oreilly.com/product/0636920029786.do">free book decision</a>, I was vacillating between an <a href="http://shop.oreilly.com/product/0636920024743.do">OCaml</a> book and <a href="http://shop.oreilly.com/product/9780596514983.do">the famous Haskell</a> one. I've done a little Haskell in the past but have never touched OCaml, so I was pretty tempted.<br /><br />However, <a href="https://lh5.googleusercontent.com/-nNaoQSlDe2o/UtNPwueDymI/AAAAAAAAAIA/3fV14G8vuqI/s337/something-amazing.jpg">something <i>amazing</i></a> happened next. I stumbled upon a page that was comparing OCaml and Haskell, which led to another page... where Haskell <i>prefix</i> notation was mentioned. I know many Haskellers who might read this would shrug, or say "yeah, we know", but this was quite a <a href="https://twitter.com/oubiwann/statuses/422243104008073216">delightful little discovery</a> for me :-)<br /><br />I don't remember the first page I found, but since then, I've come across a couple more resources:<br /><ul><li><a href="http://www.haskell.org/haskellwiki/Infix_operator">http://www.haskell.org/haskellwiki/Infix_operator</a></li><li><a href="http://learninghaskell.wordpress.com/2009/07/23/haskell-prefix-and-infix-notations-for-functions/">http://learninghaskell.wordpress.com/2009/07/23/haskell-prefix-and-infix-notations-for-functions/</a></li></ul>That's pretty much it, though. (But please let me know if you know of or find any other resources!)<br /><br />As such, I needed to do a lot more exploration. Initially, I was really excited and thought I'd be able to convert all Haskell forms to s-expressions (<span style="font-family: &quot;Courier New&quot;,Courier,monospace;">imports</span>, <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">let</span>s, etc.), but I quickly found this was not the case. But the stuff that did work is pretty cool, and I saved it in a <a href="https://gist.github.com/oubiwann/8388910">series of gists</a> for your viewing pleasure :-)<br /><br /><b>Addition</b><br /><br />The first test was pretty simple. Finding success, I thought I'd try something I do when using a Lisp/Scheme interpreter as a calculator. As you can see below, that didn't work (the full traceback is elided). Searching on <a href="http://www.haskell.org/hoogle/?hoogle=">HoogÎ»e</a> got me to the answer I was looking for, though. Off to a good start:<br /><br /><div><script src="https://gist.github.com/8388910.js?file=01-simple.hs"></script></div><br /><b>More Operators</b><br /><br />I checked some basic operators next, and a function. Everything's good so far:<br /><br /><div><script src="https://gist.github.com/8388910.js?file=02-more-operators.hs"></script></div><br /><b>Lists</b><br /><br />Here are some basic list operations, including the ever-so-cool list difference operator, <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">(\\)</span>. Also, I enjoyed the cons <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">(:)</span> so much that I made a t-shirt of it :-) (See the postscript below for more info.)<br /><br /><div><script src="https://gist.github.com/8388910.js?file=03-lists.hs"></script></div><br /><b>List Comprehensions</b><br /><br />I'm not sure if one can do any more prefixing than this for list comprehensions: <br /><br /><div><script src="https://gist.github.com/8388910.js?file=04-list-comp.hs"></script></div><br /><b>Functions</b><br /><br />Same thing for functions; nothing really exciting to see. (Btw, these examples were lifted from <a href="http://learnyouahaskell.com/chapters">LYHGG</a>.)<br /><br /><div><script src="https://gist.github.com/8388910.js?file=05-funcs.hs"></script></div><br /><b>Lambdas</b><br /><br />Things get a little more interesting with lambda expressions, especially when a closure is added for spice: <br /><br /><div><script src="https://gist.github.com/8388910.js?file=06-lambdas.hs"></script></div><br /><b>Function Composition</b><br /><br />Using the compose operator in prefix notation is rather... bizarre :-) It looks much more natural as a series of compositions in a lambda. I also added a mostly-standard view of the compose operator for comparison:<br /><br /><div><script src="https://gist.github.com/8388910.js?file=07-comp.hs"></script></div><br /><b>Monads</b><br /><br />I've saved the best for last, an example of the sort of thing I need when doing matrix operations in game code, graphics, etc. The first one is standard Haskell...<br /><br /><div><script src="https://gist.github.com/8388910.js?file=08-monads.hs"></script></div><br /><span style="font-family: Verdana,sans-serif;"><span style="color: #cc0000;">Wow</span>. <span style="color: #3d85c6;">Such abstract</span>. <span style="color: #ffd966;">So brains</span>.&nbsp;</span><br /><br />Note that to make the prefix version anywhere close to legible, I added whitepsace. (If you paste this in ghci, you'll see a bunch of prompts, and then the result. If you're running in the Sublime REPL, be sure to scroll to the right.)<br /><br />And that pretty much wraps up what I did on Sunday afternoon :-)<br /><br /><b>Other Resources</b><br /><ul><li><a href="https://twitter.com/travisbhartwell">Travis Hartwell</a>, Twisted hacker from back in the day, let me know about a <a href="http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">great Haskell tutorial for Lispers</a>.</li><li>Here's a <a href="http://www.ccs.neu.edu/home/dherman/research/tutorials/monads-for-schemers.txt">fun Lisper-oriented monad tutorial</a>. Also, here's <a href="http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html">the best monad tutorial</a> I've ever read.</li><li>Liskell (<a href="http://www.youtube.com/watch?v=YdW5AC7WQQI">ILC 2007 presentation</a>; <a href="http://clemens.endorphin.org/ILC07-Liskell-draft.pdf">paper</a>; <a href="http://clefru1.blogspot.com/2009/01/liskell-standalone.html">2009 update</a>; <a href="http://code.haskell.org/liskell/">source code</a>) </li><li><a href="http://chrisdone.com/posts/lisk-lisp-haskell">Lisk</a> (Chris' lisk github repo seems to have disappeared, with the possible exception of an <a href="https://github.com/aculich/lisk">old fork</a>) </li><li>Husk Scheme (<a href="http://justinethier.github.io/husk-scheme/">main page</a>; <a href="https://github.com/justinethier/husk-scheme">github</a>; <a href="http://hackage.haskell.org/package/husk-scheme">Hackage</a>)</li></ul><br /><b>Post Script</b><br /><br />If you're in the San Antonio / Austin area (or SF; I'll be there in March) and want to go in on a t-shirt order, <a href="http://www.customink.com/signup/53rc7gm3">let me know</a> :-) We need at least six for the smallest order (tri-blend Next Level; these are a bit pricey, but they feel GREAT). I'll collect payment before I make an order.<br /><br /><br />