Subject: Async in Clojure: Playing with Agents, Part II
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: async,clojure,agents,errors,lisp,threadpools,reblog,threads,validators,actors
Source: https://oubiwann.blogspot.com/2012/10/async-in-clojure-playing-with-agents_30.html
Comments:
Content-Type: md
Public?: true

<div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-wGUH0hB0Yls/UI62EO3wsBI/AAAAAAAAALw/HiyFdql7fIY/s1600/clojure-logo-large.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="200" src="http://2.bp.blogspot.com/-wGUH0hB0Yls/UI62EO3wsBI/AAAAAAAAALw/HiyFdql7fIY/s200/clojure-logo-large.png" width="200" /></a></div><br />In <a href="http://blog.mindpool.io/2012/10/async-in-clojure-playing-with-agents.html">the last post</a>, we took a look at basic usage of <a href="http://clojure.org/">Clojure</a>'s <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><span style="font-size: x-small;">agent</span></span> function. In this post, we'll dive a little bit deeper<br /><br /><b>Validation</b><br />We glossed over the options that you can define when creating an agent; one of them is the <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">validator</span></span> which one can use to check before the agent is updated with the passed value.<br /><br />If we want to make sure that our <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">read-agent</span></span> always gets a string value, this is all we have to do:<br /><br /><script src="https://gist.github.com/3977479.js?file=01-validation.clj"></script> <br />Similarly, any function that takes a single value as a parameter can be used here. As you can see, we had to change our default value for the agent from <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">nil</span></span> to <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">""</span></span> since there is now a string validator. If we hadn't, any time we tried to use that agent, we'd get <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><span style="font-size: x-small;">java.lang.IllegalStateException</span></span>.<br /><br /><b>When Things Go Wrong</b><br />Another option you can set when defining an agent is the error handler. This will be used in the event of an error, including if a value fails to be validated by your validator function. Here's an example:<br /><br /><script src="https://gist.github.com/3977479.js?file=02-error-handler.clj"></script> <br />With both of these options, you don't have to set them when the agent is defined; you can do it later with a function call, if you so desire (or if needs demand it):<br /><br /><script src="https://gist.github.com/3977479.js?file=03-set-options.clj"></script> <br /><b>Watch This!</b><br />So, we've got an error handler but no event handler? Yup. However, you <i>can</i> actually get callback-like behavior using <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><span style="font-size: x-small;">watch</span></span>es. Check this out:<br /><br /><script src="https://gist.github.com/3977479.js?file=04-callbacks.clj"></script> <br />Now, any time our agent's state changes, the function passed to the watch will fire. As described in <a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/add-watch">the docs</a>, the parameters are: the agent, a key of your devising (must be unique per agent), and the handler that you want to have fired upon state change. The handler takes as parameters: the key you defined, the agent, the agent's old value, and the agent's new value.<br /><br /><b>All Together Now</b><br />With all our example code in place, we can now exercise the whole thing at once. Here's the whole thing:<br /><br /><script src="https://gist.github.com/3977479.js?file=05-agent.clj"></script> <br />To simply demonstrate the async nature and the callbacks in action, let's run the following:<br /><br /><script src="https://gist.github.com/3977479.js?file=06-repl.txt"></script> <br />Eventually, our callback will render output very much like the following:<br /><br /><script src="https://gist.github.com/3977479.js?file=07-repl.txt"></script> <br />Do note, however, that if we called a series of <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">send-off</span></span>s with different times (using the same agent and watch), we wouldn't see the ones with shorter times come back first. We'd see the callback output in the same order we called <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">send-off</span></span>. This is because the <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><span style="font-size: x-small;">watch</span></span> function is called synchronously on the agent's thread before any pending <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">send-off</span></span>s (or <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">send</span></span>s) are called. In future posts, I'll cover ways around this (constructing agents on the fly as well as exploring alternative solutions with external libraries).<br /><br />Regardless, with these primitives, there are all sorts of things one can do. For instance...<br /><br /><b>Dessert</b><br />To close, check out this neat little bit of code that sends 1,000,000 messages in a ring. This code creates a chain of agents, and then actions are relayed through it (taken from the <a href="http://clojure.org/agents">agents doc page</a>): <br /><br /><script src="https://gist.github.com/3977479.js?file=08-relay-ring.clj"></script> <br />Kicking this puppy off, our million messages finish in about 1 second :-)<br /><br /><br /><script src="https://gist.github.com/3977479.js?file=09-repl.txt"></script> 