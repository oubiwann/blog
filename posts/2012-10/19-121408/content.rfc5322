Subject: libevent for Lisp: A Signal Example 
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: ubuntu,sbcl,async,io,lisp,signals,cl-async,reblog,libevent,cffi,mac
Source: https://oubiwann.blogspot.com/2012/10/libevent-for-lisp-signal-example.html
Comments:
Content-Type: md
Public?: true

<div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-c1OHL64rUD0/UHtJyO5kp0I/AAAAAAAAAFw/3oGNoK636e0/s1600/Lambda.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="200" src="http://2.bp.blogspot.com/-c1OHL64rUD0/UHtJyO5kp0I/AAAAAAAAAFw/3oGNoK636e0/s200/Lambda.png" width="200" /></a></div>At MindPool, there are several async I/O options we've been exploring for Lisp:<br /><ul><li>CMUCL/SBCL's <a href="http://common-lisp.net/project/cmucl/doc/cmu-user/serve-event.html">SERVE-EVENT</a></li><li><a href="http://common-lisp.net/project/iolib/">IOlib</a></li><li><a href="https://github.com/jadahl/cl-event">cl-event</a> (<a href="http://libevent.org/">libevent</a> for Lisp, using <a href="http://www.cliki.net/cffi">cffi</a>; three years old)</li><li><a href="https://github.com/orthecreedence/cl-async">cl-async</a> (also using cffi libevent wrapper, actively developed) </li></ul>As luck would have it, I started with cl-event, and it was a fun little adventure (given the fact that it hasn't been maintained). I corresponded with the very nice original author a bit, asking if there were any updates in other locations, but sadly there weren't.<br /><br />I was ready to dive in and get things current, when one last Google search turned up <a href="https://github.com/orthecreedence/cl-async">cl-async</a>. This little bugger was hard to find, as at that point it had not been listed on <a href="http://www.cliki.net/">CLiki</a>. (But it is now :-)). <a href="http://www.linkedin.com/in/andrewmlyon">Andrew Lyon</a> has done a tremendous amount of work on cl-async, with a very complete set of bindings for libevent. This is just what I had been looking for, so I jumped in immediately.<br /><br />As one might imagine from the topic of this post, there's a lot to be explored, uncovered, and developed further around async programming in Lisp. I'll start off slowly with a small example, and add more over the course of time.<br /><br />I also hope to cover IOlib and SBCL's SERVE-EVENT in some future posts. Time will tell... For now, let's get started with cl-async in SBCL :-)<br /><br /><b>Dependencies</b><br />In a <a href="http://blog.mindpool.io/2012/10/getting-started-with-steel-bank-common.html">previous post</a>, I discussed getting an environment set up with SBCL, I the rest of this post assumes that has been read and done :-) <br /><br /><b>Getting cl-async and Setting Up an SBCL Environment for Hacking</b><br />Now let's download cl-async and install the Libevent bindings :-)<br /><br /><script src="https://gist.github.com/3909700.js?file=01-install.txt"></script> <br />With the Lisp Libevent bindings installed, we're now ready to create a Lisp image to assist us when exploring cl-async. A Lisp image saves the current state of the REPL, with all the loaded libaries, etc., allowing for rapid start-ups and script executions. Just the thing, when you're iterating on something :-) <br /><br /><script src="https://gist.github.com/3909700.js?file=02-setup-environment.txt"></script> <br /><b>Example: Adding a Signal Handler</b><br />Let's dive into some signal handling now! Here is some code I put together as part of an effort to beef up the examples in cl-async: <br /><br /><script src="https://gist.github.com/3909700.js?file=03-handle-signal.lisp"></script> <br />Note that the <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">as:</span></span> is a nickname for the package namespace <span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><span style="font-size: x-small;">cl-async:</span></span>. <br /><br />As one might expect, there is a function to start the event loop. However, what is a little different is that one doesn't initialize the event loop directly, but with a callback. As such, one cannot set up handlers, etc., except within the scope of this callback.<br /><br />We've got the <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">setup-handler</span></span> function for that, which adds a callback for a <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">SIGINT</span></span> event. Let's try it out :-) <br /><br /><script src="https://gist.github.com/3909700.js?file=04-run-the-script.txt"></script> Once your script has finished loading the core, you should see output like the above, with no return to the shell prompt. <br /><br />When we send a <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">SIGINT</span></span> with <span style="font-size: x-small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">^C</span></span>, we can watch our callback get fired:<br /><br /><script src="https://gist.github.com/3909700.js?file=05-output.txt"></script> <br />Next up, we'll take a look at other types of handlers in cl-async.<br /><br />