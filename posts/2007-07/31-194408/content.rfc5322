Subject: Export iTunes Playlists as .m3u Files
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: music,apple,mac os x,software,itunes,python
Source: https://oubiwann.blogspot.com/2007/07/export-itunes-playlists-as-m3u-files.html
Comments:
Content-Type: md
Public?: true

<div><br /><br />I got really pissed at iTunes today: it crashed and then
wouldn't start back up, throwing the <a
href="http://www.google.com/search?q=itunes+library+file+is+locked&amp;hl=en">
infamous 'locked file' error</a>. In exasperation, I tried <a
href="http://www.songbirdnest.com/">Songbird</a>. It looks promising, but
still needs lots of work and didn't play my music-over-Samba very well. I then
got the latest <a href="http://cogx.org/">Cog</a> release.<br /><br />In my
experience, Cog is simple, straight-forward, performs no voodoo and just works
(Troll: "Stay away from the voodoo!"). I really like the fact that I can
browse the file system in Cog, and drag the albums into the list pane, but I
didn't want to start years worth of playlists all over again...<br /><br />At
which point I remembered that a couple of years ago I blogged about <a
href="http://oubiwann.blogspot.com/2005/03/itunes-playtlist-with-celementtree.
html">parsing iTunes playlists with ElemetTree</a>. It looks like the effbot
archives no longer point to the link I updated that post with, but google
cache served me well and I found Fredrik Lundh's code, repasted here:<br /><br
/><pre>try:<br /> from cElementTree import iterparse<br />except
ImportError:<br /> from elementtree.ElementTree import iterparse<br />import
base64, datetime, re<br /><br />unmarshallers = {<br /><br /> # collections<br
/> "array": lambda x: [v.text for v in x],<br /> "dict": lambda x:<br />
dict((x[i].text, x[i+1].text) for i in range(0, len(x), 2)),<br /> "key":
lambda x: x.text or "",<br /><br /> # simple types<br /> "string": lambda x:
x.text or "",<br /> "data": lambda x: base64.decodestring(x.text or ""),<br />
"date": lambda x:<br /> datetime.datetime(*map(int, re.findall("\d+",
x.text))),<br /> "true": lambda x: True,<br /> "false": lambda x: False,<br />
"real": lambda x: float(x.text),<br /> "integer": lambda x: int(x.text),<br
/><br />}<br /><br />def load(file):<br /> parser = iterparse(file)<br /> for
action, elem in parser:<br /> unmarshal = unmarshallers.get(elem.tag)<br /> if
unmarshal:<br /> data = unmarshal(elem)<br /> elem.clear()<br /> elem.text =
data<br /> elif elem.tag != "plist":<br /> raise IOError("unknown plist type:
%r" % elem.tag)<br /> return data<br /><br /></pre>Which was a great start,
but I needed .m3u output. After reading how <a
href="http://hanna.pyxidis.org/tech/m3u.html">simple the format was</a>, I was
off and running. The end result was all of my iTunes playlists playable by
Cog, which I am using now -- as I type -- to enjoy my music, free of pain. One
thing worth exploring would be how to preserve the ordering of iTunes'
playlist items.<br /><br />Here's the code I used to "export" the iTunes
playlists as .m3u:<br /><br /><pre>import re<br /><br />m3uList =
"#EXTM3U\n%s\n"<br />m3uEntry = "#EXTINF:%(length)s,"<br />m3uEntry +=
"%(artist)s - %(album)s - %(song)s\n%(filename)s\n"<br /><br />def
phraseUnicode2ASCII(message):<br /> """<br /> Works around the built-in
function str(message) which aborts when non-ASCII<br /> unicode characters are
given to it.<br /><br /> Modified from
http://mail.python.org/pipermail/python-list/2002-June/150077.html<br />
"""<br /> try:<br /> newMsg = message.encode('ascii')<br /> except
(UnicodeDecodeError, UnicodeEncodeError):<br /> chars=[]<br /> for uc in
message:<br /> try:<br /> char = uc.encode('ascii')<br />
chars.append(char)<br /> except (UnicodeDecodeError, UnicodeEncodeError):<br
/> pass<br /> newMsg = ''.join(chars)<br /> return newMsg.strip()<br /><br
/>class Playlists(object):<br /><br /> def __init__(self, filename=None,
destDir=None):<br /> self.lib = None<br /> if filename:<br /> self.lib =
load(filename)<br /> if not destDir:<br /> destDir = './'<br /> self.destDir =
destDir<br /><br /> def processTrack(self, trackData):<br /> length =
trackData.get('Total Time') or 300000<br /> song = trackData.get('Name') or
'Unknown'<br /> artist = trackData.get('Artist') or 'Unknown'<br /> album =
trackData.get('Album') or 'Unknown'<br /> data = {<br /> 'filename':
trackData['Location'],<br /> 'length': int(length) / 1000 + 1,<br /> 'song':
phraseUnicode2ASCII(song),<br /> 'artist': phraseUnicode2ASCII(artist),<br />
'album': phraseUnicode2ASCII(album),<br /> }<br /> return m3uEntry % data<br
/><br /> def processTrackIDs(self, ids):<br /> output = ''<br /> for id in
ids:<br /> try:<br /> trackData = self.lib['Tracks'][str(id)]<br /> output +=
self.processTrack(trackData)<br /> except KeyError:<br /> print "Could not
find track %i; skipping ..." % id<br /> return output<br /><br /> def
cleanName(self, unclean):<br /> clean = re.sub('[^\w]', '_', unclean)<br />
clean = re.sub('_{1,}', '_', clean)<br /> return clean<br /><br /> def
exportPlaylists(self):<br /> for playlist in self.lib['Playlists']:<br />
playlistName = self.cleanName(playlist['Name'])<br /> try:<br /> items =
playlist['Playlist Items']<br /> except KeyError:<br /> print "Playlist seems
to be empty; skipping ..."<br /> continue<br /> trackIDs = [x['Track ID'] for
x in items]<br /> data = m3uList % self.processTrackIDs(trackIDs)<br /> fh =
open("%s/%s.m3u" % (self.destDir, playlistName), 'w+')<br /> fh.write(data)<br
/> fh.close()<br /><br />def exportPlaylists(filename, dest=None):<br /> pls =
Playlists(filename, dest)<br /> pls.exportPlaylists()<br /><br /></pre>With
usage like the following:<br /><br /><pre>&gt;&gt;&gt; from iTunesExport
import exportPlaylists<br />&gt;&gt;&gt; BASE =
"/Volumes/itunes/__Playlists__"<br />&gt;&gt;&gt;
exportPlaylists('%s/Library.xml' % BASE, BASE)<br /></pre><br /><br
/><b>Update:</b> I've tweaked the code in this post a little bit, due to a
reader's questions. To run this, copy both code blocks into a single file you
should be good to go.<br /><br /><br /></div>