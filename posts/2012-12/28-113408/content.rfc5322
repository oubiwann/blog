Subject: The Secret History of Lambda 
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: functional-programming,programming,languages,software,lisp,lambda calculus,lambda,math
Source: https://oubiwann.blogspot.com/2012/12/the-secret-history-of-lambda.html
Comments:
Content-Type: md
Public?: true

<div class="separator" style="clear: both; text-align: center;"></div><div
class="separator" style="clear: both; text-align: center;"><a
href="http://3.bp.blogspot.com/-6VOclHLsn8U/UWMiLE5aa0I/AAAAAAAAAEY/SrJ6d2vVi9
s/s1600/Lambda.png" imageanchor="1" style="clear: left; float: left;
margin-bottom: 1em; margin-right: 1em;"><img border="0"
src="http://3.bp.blogspot.com/-6VOclHLsn8U/UWMiLE5aa0I/AAAAAAAAAEY/SrJ6d2vVi9s
/s1600/Lambda.png" height="200" width="200" /></a></div>Being a bit of an
origins nut (I always want to know <i>how</i> something came to be or
<i>why</i> it is a certain way), one of the things that always bothered me
with regard to Lisp was that no one seemed to talking about the origin of
lambda in the lambda calculus. I suppose if I wasn't lazy, I'd have gone to a
library and spent some time looking it up. But since I was lazy, I used
Wikipedia. Sadly, I never got what I wanted: no history of
lambda.&nbsp;[1]&nbsp;Well,&nbsp;certainly&nbsp;some information about the
history of the lambda calculus, but not the actual character or term in that
context.<br /><br />Why lambda? Why not gamma or delta? Or <a
href="http://en.wikipedia.org/wiki/Siddha%E1%B9%83_alphabet#Conjuncts">Siddham
ṇḍha</a>?<br /><br />To my great relief, this question was finally answered
when I was reading one of the best Lisp books I've ever read: <a
href="http://norvig.com/">Peter Norvig</a>'s&nbsp;<a
href="http://www.amazon.com/dp/B003VWBY1I/">Paradigms of Artificial
Intelligence Programming: Case Studies in Common Lisp</a>. I'll save my
discussion of that book for later; right now I'm going to focus on the
paragraph at location 821 of my Kindle edition of the book. [2]<br /><br />The
story goes something like this:<br /><ul><li>Between 1910 and 1913, <a
href="http://en.wikipedia.org/wiki/Alfred_North_Whitehead">Alfred Whitehead</a
> and <a href="http://en.wikipedia.org/wiki/Bertrand_Russell">Bertrand
Russell</a> published three volumes of their <a
href="http://en.wikipedia.org/wiki/Principia_Mathematica">Principia Mathematic
a</a>, a work whose purpose was to derive all of mathematics from basic
principles in logic. In these tomes, they cover two types of functions: the
familiar descriptive functions (defined using relations), and then
propositional functions. [3]</li><li>Within the context of propositional
functions, the authors make a typographical distinction between free variables
and bound variables or functions that have an actual name: bound variables use
circumflex notation, e.g. <span style="font-family: Courier New, Courier,
monospace;">x̂(x+x)</span>. [4]</li><li>Around 1928, Church (and then later,
with his grad students Stephen Kleene and J. B. Rosser) started attempting to
improve upon Russell and Whitehead regarding a foundation for logic.
[5]</li><li>Reportedly, Church stated that the use of&nbsp;<span
style="font-family: Courier New, Courier, monospace;">x̂</span> in the
Principia was for class abstractions, and he needed to distinguish that from
function abstractions, so he used <span style="font-family: Courier New,
Courier, monospace;"><span style="font-size: xx-small;">⋀</span>x</span> [6]
or <span style="font-family: Courier New, Courier, monospace;">^x</span> [7]
for the latter.</li><li>However, these proved to be awkward for different
reasons, and an uppercase lambda was used: <span style="font-family: Courier
New, Courier, monospace;">Λx</span>. [8].</li><li>More awkwardness followed,
as this was too easily confused with other symbols (perhaps uppercase delta?
logical <span style="font-family: Courier New, Courier, monospace; font-size:
x-small;">and</span>?). Therefore, he substituted the lowercase λ.
[9]</li><li><a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scie
ntist)">John McCarthy</a> was a student of Alonzo Church and, as such, had
inherited Church's notation for functions. When McCarthy invented <a
href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> in
the late 1950s, he used the lambda notation for creating functions, though
unlike Church, he spelled it out. [10]&nbsp;</li></ul><div>It seems that our
beloved <span style="font-family: Courier New, Courier,
monospace;">lambda</span> [11], then, is an accident in typography more than
anything else.</div><br />Somehow, this endears lambda to me even more ;-)<br
/><br /><br /><hr />[1] As you can see from the rest of the footnotes, I've
done some research since then and have found other references to this history
of the lambda notation.<br /><br />[2]&nbsp;Norvig, Peter (1991-10-15).
Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp
(Kindle Locations 821-829). Elsevier Science - A. Kindle Edition. The
paragraph in question is quoted here:<br /><blockquote class="tr_bq">The name
<span style="font-family: Courier New, Courier, monospace;">lambda</span>
comes from the mathematician Alonzo Church’s notation for functions (Church
1941). Lisp usually prefers expressive names over terse Greek letters, but
lambda is an exception. Abetter name would be <span style="font-family:
Courier New, Courier, monospace;">make-function</span>. Lambda derives from
the notation in Russell and Whitehead’s Principia Mathematica, which used a
caret over bound variables: <span style="font-family: Courier New, Courier,
monospace;">x̂(x + x)</span>. Church wanted a one-dimensional string, so he
moved the caret in front: <span style="font-family: Courier New, Courier,
monospace;">^x(x + x)</span>. The caret looked funny with nothing below it, so
Church switched to the closest thing, an uppercase lambda, <span
style="font-family: Courier New, Courier, monospace;">Λx(x + x)</span>. The
<span style="font-family: Courier New, Courier, monospace;">Λ</span> was
easily confused with other symbols, so eventually the lowercase lambda was
substituted: <span style="font-family: Courier New, Courier, monospace;">λx(x
+ x)</span>. John McCarthy was a student of Church’s at Princeton, so when
McCarthy invented Lisp in 1958, he adopted the lambda notation. There were no
Greek letters on the keypunches of that era, so McCarthy used <span
style="font-family: Courier New, Courier, monospace;">(lambda (x) (+ x
x))</span>, and it has survived to this day.</blockquote>[3]&nbsp;<a
href="http://plato.stanford.edu/entries/pm-notation/#4">http://plato.stanford.
edu/entries/pm-notation/#4</a><br /><br />[4] Norvig, 1991, Location 821.<br
/><br />[5]&nbsp;<a
href="https://docs.google.com/file/d/0B0CU-A1oqzzLbWF3WThvdEUzWE0/view">Histor
y of Lambda-calculus and Combinatory Logic</a>, page 7. <br /><br />[6] Ibid.
<br /><br />[7] Norvig, 1991, Location 821.<br /><br />[8] Ibid.<br /><br
/>[9]&nbsp;Looking at Church's works online, he uses lambda notation in his
1932 paper&nbsp;<a
href="https://docs.google.com/file/d/0B0CU-A1oqzzLd3VfWm1ja1E2WDQ/view">A Set
of Postulates for the Foundation of Logic</a>. His&nbsp;preceding&nbsp;papers
upon which the seminal 1932 is based&nbsp;<i>On the Law of Excluded
Middle</i>&nbsp;(1928) and&nbsp;<i>Alternatives to Zermelo's
Assumption</i>&nbsp;(1927), make no reference to lambda notation. As
such,&nbsp;<i>A Set of Postulates for the Foundation of Logic</i>&nbsp;seems
to be his first paper that references lambda.<br /><br />[10] Norvig indicates
that this is simply due to the limitations of the keypunches in the 1950s that
did not have keys for Greek letters.<br /><br />[11] Alex Martelli is not a
fan of lambda in the context of Python, and though a good friend of Peter
Norvig, I've heard Alex refer to lambda as an abomination :-) So, perhaps not
beloved for <i>everyone</i>. In fact, Peter Norvig himself wrote (see above)
that a better name would have been <span style="font-family: Courier New,
Courier, monospace;">make-function</span>.<br /><br /><br />