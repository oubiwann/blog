Subject: The File System as a Database and the Last Post of Summer
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: 
Source: https://oubiwann.blogspot.com/2004/08/file-system-as-database-and-last-post.html
Comments:
Content-Type: md
Public?: true

<div xmlns="http://www.w3.org/1999/xhtml"><i class="categories">software :: python</i><br/><br/><p/><br /><p>Heh, that title reads like the title of a Victorian-era<br />pseduo-science journal article. However, I really do feel that August<br />31st is the last day of Summer... that come September first, Everything<br />Changes. But not in a bad way -- Fall is amazing. It's exhilarating in<br />a funny, erie kind of way. </p><br /><br /><p>So, this is the last blog entry of the Summer, 'nough said.</p><br /><br /><p>As for the rest of the title, I've been discussing this topic with<br />friends of late. Basically, how can we access the file system in<br />python, treat it like a database, search on it like a database, and<br />write code for it in such a way that when we are ready, we can<br />migratate to a database with no code changes (only config or module<br />import changes)?</p><br /><br /><p>Well, we've debated the issue(s) back and forth. I even asked<br />Phillip Eby about it on the PEAK mail list (we will be using PEAK for<br />this project... once we learn it!). But I think we've all been trying<br />to make the problem and solution too general. A very simple and rigid<br />API would work for us right now. It means less time spent on R&amp;D,<br />and since this is for a paying customer, that means more money for us<br />in the long run.... as long as what we implement leaves enough<br />flexibility for future change.</p><br /><br /><p>So, without further ado, an adaptation from a post to the mail list today:</p><br /><br /><p>If we have a file on the filesystem, then the full path + the file<br />name uniquely identifies that file. In my limited knowledge of OODBs,<br />this is pretty standard (path-to-object = UID). Then there's the file<br />itself, which contains some data. Additionally, however, is the path:<br />it contains data that is just as important as the data inside the file.</p><br /><br /><p>UID: full path + filename<br/><br />Data: stored in file at /fullpath/filename<br/><br />Data: stored in path and filename</p><br /><br /><p>How do we think about this problem? If this were a table, we might be looking at a schema like this:</p><br /><br /><p>Table<br/><br />-----<br/><br />id: full_path + filename<br/><br />blob: rrd file/text file/ini file/xml file with DTD/whatever<br/><br />additional field 1:<br/><br />additional field 2:<br/><br />additional field 3:<br/><br />...<br/><br />additional field n:</p><br /><br /><p>I'm not proposing an OR mapping here: that's complicated shit. Way<br />beyond me. Some of the biggest brains in the software development world<br />are working on ways to do that which make sense and work right.</p><br /><br /><p>I'm just talking about doing something simple and straight-forward.<br />Something that's easy to configure and easy to migrate from a<br />filesystem to an RDBMS.</p><br /><br /><p>This shouldn't be as hard as I was thinking originally. The only<br />issue is that for every implementation, there will need to be a<br />configuration. This is because, by their nature, database tables and<br />fields defined therein are fixed; directory structures aren't/don't<br />have to be. A configuration would "lock" a directory structure... you'd<br />have to have an API (or something) that defined what each level of the<br />directory structure indicated, as these would have to be mappable to<br />fields defined in a table (for migration to a SQL framework).</p><br /><br /><p>Additionally, if you wanted to move the data stored in you blob<br />field out of its own little format into SQL, you'd have to define an<br />additional config/API for mapping its data to more fields in the<br />table...</p><br /><br /><p>So what you'd really have here is a directory structure schema and<br />then a file storage schema. Using the two together, you'd get what I<br />originally asked Phillip Eby about...</p><br /><br /><p>PEAK already has 'peak.storage.files' which lets you interact with<br />text files transactionally. We could do something like this for other<br />types of data-containing files at the end of whatever directory tree.<br />The combination of this with an implementation of a queryable filsystem<br />data interface should leave us with a fairly powerful tool for many of<br />our projects.</p><br /><br /><p>Questions to ask:<br/><br />* What constitutes a database? (root dir and below?)<br/><br />* What constitutes a table? (all directories at the first level, inside the root dir?)<br/><br />* What constitutes a row? (every branch from root? this means all paths<br />from the root dir have to have the same number of dirs, subdirs, etc.)<br/><br />* Can there be no file at the end of a path?<br/><br />* Can there be empty files at the end of a path?<br/><br />* Can there be multiple files at the end of a path?<br/><br />* Can there be files in intermediate directories? (dirs that aren't the end of a path; good place for metadata?)<br/><br /><br /></p><br /></div>