Subject: PyRRD
Subtitle: 
Header-Image: 
Excerpt: 
From: oubiwann
Twitter: oubiwann
Category: 
Keywords: pyrrd,ubuntu,graphics,software,python,debian,monitoring
Source: https://oubiwann.blogspot.com/2006/01/pyrrd.html
Comments:
Content-Type: md
Public?: true

<div xmlns="http://www.w3.org/1999/xhtml"><div class="entry"><p>Keeping alive the whimsy that had me pick <a href="https://launchpad.net/webxcreta/">webXcreta </a>back up and get it working, I have returned to another old project: <a href="https://launchpad.net/pyrrd/">PyRRD</a>. I had started work on this a couple years ago while adding functionality to <a href="http://coyotemonitoring.com/">CoyoteMonitoring</a>, but had to put it on hold due to budget constraints.<br /></p><p>In a nutshell, PyRRD is an object oriented interface (wrapper) for the <a href="http://tinyurl.com/b4vr2">RRDTool</a>. python bindings (rrdtool). Where when using rrdtool you might see something like this:<br /></p><pre><br />rrdtool.graph(path,<br />'--imgformat', 'PNG',<br />'--width', '540',<br />'--height', '100',<br />'--start', "-%i" % YEAR,<br />'--end', "-1",<br />'--vertical-label', 'Downloads/Day',<br />'--title', 'Annual downloads',<br />'--lower-limit', '0',<br />'DEF:downloads=downloads.rrd:downloads:AVERAGE',<br />'AREA:downloads#990033:Downloads')<br /></pre><p>with PyRRD, you have this:<br /></p><pre><br />def1 = graph.GraphDefinition(vname='downloads', rrdfile='downloads.rrd',<br />ds_name='downloads', cdef='AVERAGE')<br /><br />area1 = graph.GraphArea(value=def1.vname, color="#990033',<br />legend='Downloads', stack=True)<br /><br />g = graph.Graph(path, imgformat='PNG', width=540, height=100,<br />start="-%i" % YEAR, end=-1, vertical_label='Downloads/Day',<br />title='Annual downloads', lower_limit=0)<br />g.data.append(def1)<br />g.data.append(area1)<br />g.write()<br /></pre><p>Optionally, you can use attributes (in combination with or to exclusion of parameters):<br /></p><pre><br />def1 = graph.GraphDefinition()<br />def1.vname='downloads'<br />def1.rrdfile='downloads.rrd'<br />def1.ds_name='downloads'<br />def1.cdef='AVERAGE'<br /></pre><p>And there are aliases for the classes so that you may use the more familiar names from RRDTool:<br /></p><pre><br />def = graph.DEF(vname='downloads', rrdfile='downloads.rrd',<br />ds_name='downloads', cdef='AVERAGE')<br />area = graph.AREA(value=def.vname, color="#990033', stack=True)<br /></pre><p>Not only is this object approach more aesthetically pleasing to me, but the interface is <b>much</b> easier to manipulate programmatically. That's insanely important to me because of how I use RRDTool in other projects. I do a great deal of data manipulation and graph representation, and using the regular RRDTool python bindings is simply a show-stopper.</p><p>Another neat thing about this wrapper is that the classes use __repr__() to present the complete value of the object as an RRDTool-ready string. This means that you are not limited to using the python bindings, but can also freely and easily interact with the command line tools, configuration values in files, etc.</p><p>When I've got a first release ready to go, I'll push it up to <a href="http://cheeseshop.python.org/">CheeseShop</a> and post a notice here on the blog.</p><p></p></div><b>Update</b>: PyRRD is now available in Debian and Ubuntu.</div>